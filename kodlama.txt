                           ÖNERİLEN WEB SİTELERİ: 
faviconcc(web sitesi başlığı için görsel oluşturma)  
flaticon(görsel bulmak için) 
GIPHY(hareketli görsel için)
https://css3buttongenerator.com/ (buton oluşturmak için)
font awesome (güzel simgeler bulmak için {kullanabilmek için web sayfasındaki <link>'ini head etiketine yerleştir})(link java linki olacak ama problem değil eğer
bulamadıysan profile>manage kits>sana verdikleri kite tıkla orada. Ayrıca kopyalayıp yapıştırdığın öğeyi büyütmek için class'ın içerisinde fa-4x yazarak öğeyi
4x yapabilirsin(ders 6 bölüm 75)
stackexchange (code golf): bir kodu mümkün olduğunca kısa yazabilme challenge
adobe colo ve (özellikle bu) color hunt : web siten için seçmen gereken renk kombinasyonlarını sana gösterir (section 8 ders 96)
DAILY UI : 100 günde 100 tasarım yapmak için bir challenge sitesi
Collect UI : Tasarımla ilgili örnekler var
https://www.w3schools.com/jsref/dom_obj_style.asp : javascriptte CSS özellikleri nasıl kullanılır
minify : kodunu yalnızca tarayıcının okuyabileceği şekilde küçültür
openweather: hava durumu API'sı alabiliriz (section 20 ders 241)
postman : API'leri test etmek için kullanırız
cryptii.com : hex 16'lık kodları ve bytes'ları yazıya dönüştürür
mailchimp.com : email listesi oluşturmak için(section 20 ders 249)
TMDB: film ve tv API'leri içeriyor
OMDb: film API'si içeriyor
Lorem Picsum : rastgele görsel linki veriyor
React Developer Tools : React'teki components'ları , props'ları hooks'ları gösterir(Google eklentisi)
vercel.com : tıpkı netlify.app gibi web sitemizi yayınlayabileceğimiz bir platform
react-toastify : uyarı, onay, hata vb gibi kutucuklar oluşturan güzel bir npm paketi. Github'ta reposu var detaylı anlatılıyor


EK BİLGİ!
Singleton(tek nesne) tasarım kalıbı, bir sınıfın tek bir örneğini almak için kullanılır.
Amaç oluşturulan nesneye global erişim noktası sağlamaktır.Sistem çalıştığı sürece ikinci bir örnek oluşturulmaz, böylelikle istenen nesnenin tek bir defa oluşturulması 
garanti altına alınacaktır. Singleton nesneler ilk çağırıldıklarında bir kere oluşturulurlar ve sonraki istekler bu nesne üzerinden karşılanır.

                                
!bilgi : komutlar belirli bir sırada ilerler. İlk yazılan kod sayfada en üstte görünür ve 'çocuklar ebeveynlere oturur!'. Yani HTML öğeler alt öğelerdir. Sonrasında
yazılan kodlar onun üzerine oturur.
bilgi! : öğelerin class'ına fa-4x yazarsak o öğe 4x büyür

!KLAVYE BİLGİLERİ!
ctrl+a : dosyadaki bütün her şeyi seçer
ctrl+d : dosyada seçtiğiniz yazıdan başka varsa onlarıda seçer
Alt : Alt tuşuna basılı tutarak tıkladığımız her yerde bir pointer daha çıkar
Alt : Alt tuşuna, bir yazıyı(div'i vb) seçtikten sonra basılı tutarsak ve aynı anda ok tuşlarıyla aşağı veya yukarı yaparsak seçili öğeyi alt veya üst satıra taşır


                                       HTML

<input required : eğer doldurulacak bir alan varsa bu alanı doldurmanın zorunlu olmasını sağlar
bilgi! : birden fazla öğenin içerisine aynı şeyi yazmak istediğimizde ' alt + sol tık 'la alt veya üst satırlara geçebilirsin
bilgi! : yorum eklemek için eklemek istediğin öğeyi mausela kapla (altını çizmekte deniyor yani kopyala yapıştır yapmak için kullandığın sistem) ctrl ve / yap
<hr size="3" : çizginin kalınlığını belirleyen parametre
<hr noshade="" : gölge olup olmamasını belirtiyoruz
<center></center> : ortalamak istediğimizi belirtiyoruz. (kapatılan etiket)
!bilgi: // veya <!-- not --> : kullanarak yazdığım kod içerisinde kendi notumu oluşturabilirim
<!DOCTYPE html> : browsere html sürümünün ne olduğunu söyler
<meta name="description" content="web sitenin neyle alakalı olduğunu yaz. Bu yazı google aramalarında web sitenin hemen altında görüntülenecek" :web sitenin tanımı
<em></em> : arasında yazan metine hem vurgu yapar hem de metini italik yapar (kapatılan etiket)
<thead> : tablo etiketi içerisinde <head> oluşturmak için
<th> : <thead> etiketi içerisine <td> değil <th> açılır
<tbody> : tablo etiketi içerisinde <body> oluşturmak için
<tfoot> : tablo etiketi içerisinde
<form> : doldurulabilir bir form oluşturmaya yarar (kapatılan etiket)
<form label> : kullanıcı arabirimindeki bir öğe için bir başlığı temsil eder.(kapatılan etiket)
<form input : kullanıcının formda dolduracağı yeri oluşturan etiket
<form input type="text" : kullanıcın yazı yazabileceği bir yer oluşturmasını sağlayan parametre
<form input type="submit" : kullanıcın tıklayabileceği bir gönder kutucuğu oluşturur
<form input type="color" : rengi belirleyebileceğimiz bir kutu oluşturur
<form input type="checkbox" : onay kutucuğu oluşturur
<form input type="file"	: dosya gönderimi için alan oluşturur
<form input type="date" : tarih bilgisi girebileceğimiz bir alan oluşturur
<form input type="range" : seçim aralığı oluşturabileceğimiz bir parametre
<button> : kullanıcın tıklayabileceği bir buton oluşturur (kapatılan etiket)
<textarea : kullanıcının mesaj yazabileceği bir kutucuk oluşturur
<div> : html de kutu oluşturmamızı sağlayan etiket. Bu sayede içerikleri birbirinden ayırabiliriz.(kapatılan etiket)
(div , body etiketinin içerisinde oluşturulduktan sonra ÖR: <div class="top-container"><h1>Yasir Çeşmeci</h1></div> , class vermemiz gerekir. ve css 'e bu class 
ismiyle etiketimizin içerisinde bulunan öğelerle ilgili istediğimiz etkeni uygulayabiliriz
<span> : html etiketleri içerisindeki yazının (altı çizii yapma, rengini ve yazı tipini değiştirme vb.) şeklini değiştirmek için kullanılır.(kapatılan etiket
<span class="market" : CSS kısmında ' .market ' açarak oluşturduğumuz span etiketi içerisindekilerin özelliklerini yapılandırabiliriz.
<iframe
  width="1280"
  height="720"
  src="https://www.youtube.com/embed/<%= movieKey %>"                                                : youtube'dan video göstereceksen linkteki watch?v yerine embed kullanmalısın. Çünkü watch kullandığın
  frameborder="0"                                                                                       zaman video sayfana gömülmek istemiyor ama embedle gömebilirsin(Youtube'da videoya sağ tık yapıp yerleştirme kodunu kopyaladan alabilirsin)
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen
></iframe>
contenteditable="true" : eklenilen html öğesini yeniden düzenlenebilir(text) haline getirir
<a href="www.twitter.com" target="_blank" rel="noreferrer">Click</a>  : rel="noreferrer" , target="_blank" yaptığımız zaman yönlendirdiğimiz sitenin analizlerinde o bağlantıya kim tarafından yönlendirildiğini anlamasına engeller
<details>
  <summary>Epcot Center</summary>
  <p>International pavilions, award-winning fireworks and seasonal special events.</p>  : bu şekilde (details'e open eklediğimiz için otomatik açık olarak geliyor) önce başlık daha sonra açıklama şeklinde yazı oluşturabiliriz
</details>
&nbsp; : kullanıldığı zaman bir boşluk yaratır(tavsiye edilmiyor)



                                        CSS Media Query
         !!!!!!!!MEDİA QUERY HER ZAMAN CSS'İN SONUNDA OLMALI YOKSA ÇALIŞMAZ!!!!!!!!!!!!
YUKARIDAKİ YAZIYI OKU!!
@media (max-width: 1028px) {

#title {
  text-align: center; 
  position: static;                 : @media 'dan sonra yazdığımız "(max-width: 1028px)" maksimum 1028px olan ekranlar için geçerli kodu gösteriyor. Yani web sitemizi,    
  transform: rotate(0);	               mobile tablete ve bilgisayara uyumlu hale getirmek istediğimiz zaman her birinde farklı(uyumlu) görünmesini sağlayabiliriz.
}                                      Ayrı bunu hem id(#)'lerde hem de class(.)'larda yapabiliyoruz.

}








                                        CSS

 -webkit-transition: all 1.3s ease-in-out;
 -moz-transition: all 1.3s ease-in-out;
 -o-transition: all 1.3s ease-in-out;                  : Style'ına bunları yazdığımız element, class veya id'deki değişimler daha yavaş gerçekleşir. 1.3s delay olur.(Örneği apple_apps_website'da mevcut)
 -ms-transition: all 1.3s ease-in-out;
 transition: all 1.3s ease-in-out;

cursor: pointer;     : mause'la üzerine geldiğimiz zaman mause'ın şekli pointer olur (linke tıklayacağımız zaman dönüştüğü şekil)	

.btn:focus   : ":focus" istediğimiz bir sınıfa, id'ye veya elemente tanıyabiliriz. Kullanıcı focusladığında yani üzerine tıkladığı, dokunduğu zaman ne olacağı söylüyoruz. background-color: #fff; yapabiliriz.

__________________________________________________________
body {
  background-image: linear-gradient(hsl(273, 75%, 66%), hsl(240, 73%, 65%));      : web sitesini yukarıdan aşağıya iki renk  yapabiliyoruz. radial-gradient(); yaparsakta sağdan sola iki renk yapagbiliyoruz
}   
                                                                                  
______________________
position: relative;
transform: translate(-50%, -50%);         : öğeyi sayfaya ortalamak için kullanılır (https://www.youtube.com/watch?v=_ERcJIacsKA  bu linkteki adam söylüyor)
top: 50%                                    eğer iki öğeye uygulayacaksan; div oluşturup css'de bu özellikleri o div'e atayacaksın,!!!text-align center yapıp ortaya getireceksin(yoksa gelmez)
left: 50%


_______________________________________
{min-height: 100vh;} : öğelerini ortalar

text-decoration: yazının altını çizmemizi veya anchorun altındaki çizgiyi kaldırmamızı ve yazıya dekorasyon eklememizi sağlar

!bilgi : CSS'de birden fazla öğeye(h1,h2,h3 gibi ana öğeler) aynı değeri vermek için CSS'e yazarken h1, h2, h3 {                                            yapabiliriz
                                                                                                                font-family: 'Montserrat', sans-serif;
                                                                                                                }
!bilgi : class="container-fluid" oluşturup CSS'de padding: 7% 15% yaparsanız bu sınıfın içerisinde bulunduğu bütün divlere bu paddingi uygular. Diyelim ki birden fazla divin içerisine bu sınıfı verdik ama bir tanesinin
üst padding'inin 7% değilde 3% olmasını istiyoruz. Bunun için o divin üzerine bir id="title" verip CSS'de bunu #title .container-fluid {                      yaparsak bu id'ye özel container-fluid bu paddingi uygular (section 7 ders 89)
Eğer #title .container-fluid arasında boşluk varsa sağdan sola okunur eğer boşluk yoksa soldan sağa                                     padding: 3% 15% 7%
                                                                                                                                        }
CSS'de etiketler h1 {                şeklinde açılır
                     color: green;
                                  }
box-shadow: öğelere gölge veriyor (istediğimiz renkte). Eğer görsel transparansa filter: drop-shadow(0 0 20px green); şeklinde yapabiliriz
{align-items: center;} : öğelerin ortalanmasını sağlar
! z-indeks: eğer öğen konumlandırılmışsa (absolute,relative,fixed gibi) { } yaparak o öğeyi diğer tüm öğelerin üstüne çıkmasını sağlarsın. Çünkü öğelerin
z-indeksi normalde '0' dır. -1 yaparsan diğer tüm öğelerin arkasına gitmesini sağlarsın (Nerede işe yarayacağı section 7 ders 83)
! head etiketi içerisinde kodumuzun tamamını etkilemesini istediğimiz bir şey olduğunda ama tek tek her kodun içerisine yazmak istemediğimizde kullanacağımız
şey(Örneğin arka plan rengini değiştirmek istediğimizde 'body' etiketinin içerisine yazmak yerine head etiketinin içerisine): 
<style> body { background-color: blue;} </style> yazabiliriz (HTML ETİKETİ İÇERİSİNDE YAPMAK İSTEDİĞİMİZDE <style> açıyor!!! CSS dosyasında açmıyoruz!!)
hr {border-style: none; : çizgilerin şeklini belirleyen parametre
hr {height: 2px;} : çizgilerin genişliğini belirleyen parametre
hr {width: 30%;} : çizgilerin sayfada kaplayacağı genişliği belirleyen parametre
hr {border-top-style: dotted;} :çizginin şeklini (yuvarlak vb.) belirleyen parametre
hr {border-color: grey;} : çizginin rengini belirleyen parametre
hr {border-width: 5px; : çizginin kalınlığını belirleyen parametre
<link rel="stylesheet" href="css/styles.css" : ek bir dosya açıp (harici) css kodlarını yazdığımız zaman bu etiket sayesinde html yazdığımız sayfa için
istediğimiz css kodları uygulanacaktır. (href="css/styles.css" deki 'css' klasörümüzün ismi , 'styles.css' klasörün içindeki css kodlarımızın olduğu yer.
Tarayıcının css kodlarımızı algılaması için klasörün isminin css olması ve klasörün içinde kodlarımızı yazdığımız dosyanın ismi styles.css olmalı. <link
etikini açtığımız zaman bize <link rel="stylesheet" href="/css/styles.css" olarak verecek. Bizim baştaki '/' silmemiz gerekiyor. Baştaki '/' kök anlamına
geliyor ama kök için javascript olması gerekiyor.
h1 {color: green;} : kelimelerin rengini değiştirmek için kullanılır.
table {padding: 10px;} : satır boşluğu oluşturacak (derste verilmedi kendim buldum, css de boşluk için bunun mu kullanılması gerekiyor bilmiyorum)
table {border-spacing: 10px;} : sutün boşluğu oluşturacak (derste verilmedi kendim buldum, css de boşluk için bunun mu kullanılması gerekiyor bilmiyorum)
!CSS kodu yazarken, dahili (HTML içerisine yazmak) ve harici (Başka bir klasör oluşturup oradaki dosyaya yazmak) olmak üzere iki şekilde yazarız. Dahili her
zaman hariciden önceliklidir. Yani aynı iki kodu hem dahili hem hariciye yazarsak web sitemize yansıyacak kod haricidir. AMA AMA AMA önerilen hariciye 
yazmaktadır!!!!!
!BİLGİ sınıflar ve id 'ler öncelikli olarak web sayfasına yansırlar
class="yumurta" : bu etiket html etiketlerinin içerisine yerleştirilir. Bu sayede css'de ' .yumurta {background-color: red;} 'yaparak 'yumurta' classına sahip
öğelerin arka planının kırmızı olmasını sağlarız. Birden fazla etikete uygulanabilir ve birden fazla class açılabilir (Section 4 and 37. ders)
class="yumurta yuvarlak" : class etiketinin içerisine birden fazla sınıf ekleyebiliriz. Bu sayade hem .yumurta hem de .yuvarlak yazarak farkı parametreleri
içerisine ekleyebilirim (Section 4 and 38. ders)
.yuvarlak {border-radius: 100%} : seçtiğimiz öğeyi yuvarlak yapacaktır. (MDN'den border-radius 'u inceleyerek daha fazla şekil bulabilirsin)
id="heading" : bu etiket de html etiketinin içerisine yazılır. bu etiket kullanılarak css'de istediğimiz özelliği içerisine 'id' yazdığımız etikete
uygulayabiliriz. class 'dan farklı olarak TEK BİR ETİKETE ve SAYFADA TEK BİR SEFER uygulanabiliyor.(#heading {background-color: yellow;} şeklinde kullanılır)
psuedo class : Bir CSS sözde sınıfı , seçili öğe(ler)in özel durumunu belirten bir seçiciye eklenen bir anahtar sözcüktür.Psuedo class olup olmadığını anlamının en kolay
yolu başındaki ':' işaretidir(ÇOOOOOK ÖNEMLİ MDN'den kesinlikle yapabileceklerine bak!!!!)(Section 4 and 38. ders)
:hover :kullanıcı bir işaret aygıtıyla bir öğeyle etkileşime girdiğinde eşleşir, ancak onu etkinleştirmesi gerekmez.
Genellikle kullanıcı imleçle (fare işaretçisi) bir öğenin üzerine geldiğinde tetiklenir.
{margin: 0;} : Web sitemizde oluşturduğumuz öğelerin (h1, div vb.) diğer öğelerden(body 'de buna dahil) ne kadar uzak olacağını ifade eder. Eğer '0' yaparsak diğer 
öğelerle bitişik olacağı anlamına gelir
!BİLGİ ' margin-left: auto; margin-right: auto; display: block; ' yaparsak öğelerimiz web sitemizin ortasına konumlanır
{margin-left: 100px;} : sol tarafından 100px uzak olacağı anlamına gelir
{margin-right: 0;} : sağ tarafındakilerden uzaklaşmayacağı anlamına , hiç boşluk olmayacağı anlamına gelir
{margin-top: 0;} : üst tarafta hiç boşluk olmayacağı anlamına gelir
{margin-bottom: 0;} : alt tarafta hiç boşluk olmayacağı anlamına gelir 
{padding: 20px;} : içeriğinizin içinde bulunduğu kutucukla(hiç div etiketi eklemesende bile yazdığın her yazı eklediğin her öğe bir kutucuğun içerisindedir. Web Site kutucuklardan oluşur) 
arasındaki boşluğu belirler (sadece padding 'e değer vererek 4 tarafada aynı boşluğu uygulayabilirsin)
{padding-top: 20px;} : üst tarafta boşluk bırakır
{padding-bottom: 20px;}: alt tarafta boşluk bırakır
{padding-left: 20px;}: sol tarafta boşluk bırakır
{padding-right: 20px;}: sağ tarafta boşluk bırakır
{border: solid;} : oluşturduğumuz öğelere çerçeve ekleyecek
{border: solid 10px;} : 10px kalınlığında bir çerçeve oluşturur
________________________________
{display: flex}
{justify-content: flex-start} : "display: flex" yaparak esnettiğin öğeleri "justify-content: flex-start" yaparak kabın(div'in) başında hizalar. Eğer flex-end yaparsak kabın sonunda hizalar

{display: inline;} : öğeyi satır içinde kendi yarattığı kadar boşluk olacak şekilde oluşturur (genişliğini kendin ayarlayamazsın)
{display: block;} : öğeyi kendinden önce ve sonra satır boşluğu olacak şekilde oluşturur
{display: inline-block;} : yanına başka öğelerin gelmesine izin vermeyen (<p>,<h1> vb) öğelerin , yanına öğe gelmesine olanak tanır (aynı zamanda öğelerin genişlikleriyle de oynayabilirsin)
{display: none;} : öğenin kodda gözükmesine rağmen web sayfasında gözükmemesini sağlar
{visibility: hidden;} : öğenin kodda gözükmesine rağmen web sayfasında bulunduğu yerde bir boşluk olmasını sağlar. Öğe web sitesi içerisinde gizlenir ama bulunduğu konumda yalnızca 
web sitenin arka plan rengi görünür
{position: static;} : html'de position ' static ' olarak gelir. Yani hiçbir oynama yapmasak dahi öğelerin position 'u static 'dir
{position: relative;} : öğemizi kendi belirlediğimiz static konuma getiriyoruz. Öğemizin olması gerekn yere görebir kenar boşluğu eklemesini sağlar!
{position: relative; 
 right: 10px;
 left: 10px;
 top: 10px;
 bottom: 10px;} : öğemizin yazdığımız konumdan 10px uzaklaşmasını sağlar
{position: absolute;} : Mutlak konumlandırmadır (Section: 5 ders 48). Öğeyi bütün bir sayfada kenar boşluğu olacak şekilde diğer öğeleri hiçe sayarak konumlandırır (relativ ve absolute
birlikte kullanılarak güzel çalışmalar yapılabilir. ÖR: <div class="conteiner">           .conteiner {                         .red {
                                                        <div class="red">                             height: 400px;                 bacground-color: red;
                                                        </div>                                        width: 400px;                  height: 200px;
                                                        </div>                                        background-color: grey;        width: 200px;
                                                                                                      }                              }
{position: fixed;} : bu özelliği tanımladığımız öğe ekran kaydırılsa dahi web sitesinde konumlandığı yerde sabit kalacak ve ekranı kaydırırken hep orada duracak , ekran kaydırılsa bile
gözükecektir.
{text-align: center;} : Block öğelerinin , web sitesinde ortalanmasını sağlar (yükseklik veya genişlik verdiğin öğeler için bu kodla ortalayamazsın)
{margin: 0 auto 0 auto;} : (Soldan sağa doğru ilk '0' üstü , ilk auto sağı , ikinci '0' altı , ikinci auto solu işaret eder) Öğelerin web sitesinde ortalanmasını sağlar. (genişlik ve
yükselik verilen öğelerin)
!BİLGİ: oluşturduğun classta daha fazla alan kazanmak için (section 5 ders 49 dakika 7.30) padding-top 'u kullanmalısın.
3 YAZI TİPİ AİLESİ VARDIR
{font-family: serif} : köşeleri çizgili şekil şukul yazı tipi
{font-family: sans-serif} : daha sade okunması daha kolay yazı tipi
{font-family: monospace} : kodlama yazarken bu dil ailesi kullanılır. (okunması daha kolay)
!BİLGİ: Yazı tipi oluşturmak için google fontsa git>oradan istediğin yazı tipini seç ve ekleye tıkla>sağ üst köşede 'View Selected Families' e tıkla> oradaki tüm 
i kopyala ve <head></head> etiketinin içine yerleştir. CSS'de de yazı tipini {font-family: *} yıldız olan yere ,google fonts'da view selected families tıkladıktan sonra aşağıda çıkan CSS rules to
specify families'deki istediğin fontu koplaya ve yapıştır. (Örneğin montserrat'ın thin 100 , regular 400 , black 900'ünü aynı anda seçebilir linki yapıştırıp üçünü de font-families'de seçip kullanabilirsin
(kullanırken font-weight'sini ayarlamayı unutma (örn 100 , 400 , 900)
!BİLGİ : web sitesini iki yazı tipinde tutmak daha profesyonelce görünür
{font-size: 526.5%;} : yazının dinamik olarak boyutunu belirler.(100% eşittir 16px . Bu yüzden 90px 'lik bir boyut istiyorsak 90/16 yapmalıyız)
{font-size: 1rem;} : 1(r)em = 100% yani 16px (section 5 ders 53)
!Eğer body içerisinde font size ayarlarsak ÖR: {font-size: 200%;} ve h1'in farklı olması isteyip onun içerisinde de font size ayarlarsak ÖR: {font-size: 526.5%}
{font-weight: normal} : yazı tipi kalınlığını belirler
{color: red;} : yazı tipi rengini değiştirmemizi sağlar
{line-height: 2;} : 1 veya 2 yazılır. 2 yazmak altında ve üstünde ne varsa 2 ölçek boşluk bırakması anlamına gelir /* sonuna px em % gibi şeyler yazılmaz*/
{float: left;} : yazıların resmin(fotoğrafın) yanında (yüzmesini) konumlandırılmasını , etrafını sarmasını sağlar
!Bilgi : resimle yazı arasına kenar boşluğu vereceksen. Resme kenar boşluğu vermek bazen yazıya kenar boşluğu vermekten daha kolay olabilir

ÖNEMLİ: Float yaptıktan sonra , float yaptığımız öğenin altında üstünde bulunan öğeler kayıyorsa sebebi yazının yeteri kadar yer kaplamaması (daha uzun olması) olabilir

{clear: left;} : anti-float gibi düşünülebilir. Etrafını sarmasını istemediğimiz metin(vb.) için kullanabiliriz.
{text-shadow: 1px 1px 2px black;} : Kendin buldum. Yazıya Gölge ekliyor
{rotate: 15deg} : fotoğrafı 15 derece sağa çevirir
{list-style-top: none} : ul-li öğelerinde başta bulunan yuvarlağı kaybeder
{owerflow:auto} :Ekran boyutu tamsa kaydırma çubuğu çıkmaz lakin eğer aşağıya (veya yana) doğru daha fazla içerik varsa kaydırma çubuğu çıkar
{overflow-y:scroll} : ekrandaki içerik ne olursa olsun (tam olmasa dahi) kaydırma çubuğu bulunur(y ekseninde , istersek x ekseninde de aynısını yapabiliriz)
{position:fixed} : tanımladığımız div'in position'ını ne olursa olsun ekranda gözükecek şekilde ayarlar (bir nevi sabitler)








                  BOOTSTRAP


<nav></nav> : navigasyon oluşturur (üzerine tıkladığında seni ilgili sayfaya yönlendirir)
<nav class="navbar" : biraz padding ve birkaç tane daha parametre ekler (ul ve li içerisine yaz)
<a class="nav-link" href="#" : üzerine tıklandığında sayfada gidilmesini istediğin yere gitmek için bir yazı oluşturur (section 6 ders 66)
<ul class="navbar-nav ms-auto" : buradaki m margin anlamına geliyor , buradaki s marginin start yani başlangıçtan yani sol taraftan oluşacağı anlamına geliyor
!BİLGİ : Bootstrap linki head'e her zaman CSS linkinden önce yerleştirilmelidir
Bootstrap>Doc>Grid>Grid Systems : Sayfadaki öğelerin sayfanın boyutuna göre kaç parça görünmesini istediğini ayarlıyorsun
<class="col-6" : bir sutün 12 parçadan oluşur. col-6 yazarsak 2 parçaya bölmüş oluruz. (ekrandada iki parça gözükür)
!Bilgi : HTML'de her şey yukarıdan aşağıya doğru sıralanır. Yani eğer bootstrap linkini css'den önce yüklersen önce bootstrap linkindeki css'ler işlenir daha 
sonra kendi yazdığınız css'ler
{class="container"} : web sitesine ortalayacak şekilde bir konteynır içerir ve öğeleri içerisine yerleştirir
{class="container-fluid"} : web sitesinde öğeleri kapsayacak (web sitesindeki enin(yataylığın) tamamını kullanır) şekilde bir konteynır oluşturur. Bu konteynır
otomatik bir şekilde ekran küçüldükçe küçülür ve bunu narin bir şekilde yapar (Section 6 ders 74)
carousel : web sitesinde kaydırmalı bir alan oluşturmayı sağlar. (ders 7 bölüm 80-81)
<div class="card-group">
<div class="card" style="width: 18rem;"> : Card sınıfıyla "basic-standart-premium" gibi paket görselleri(kartları) oluşturabilir(ders 7 bölüm 82)(bununla ilgili masaüstünde yeni metin belgesi oluşturdum detayları orada) 
</div>
</div>



 
                                JAVASCRIPT


window.addEventListener("resize", function (event) {
  // kod buraya :  if(window.innerWidth >= 575){                       şekilde gelecek  : vanilla JS'le ekran boyutuna göre yeniden düzenleme
                                                //gerçekleşecek eylem
                                                }
  },true)


function scrollAnimation() {
  let scrolly = window.scrollY
  document.getElementById("calculatorid").style.transform =           : sayfa aşağıya kaydırıldıkça seçtiğimiz öğenin döndürülmesini sağlar
    "rotate(" + scrolly / 1.5 + "deg)"
  setTimeout(scrollAnimation, 10)
}
scrollAnimation()

input.addEventListener("keydown", (event)=> {
  if(event.key === "Enter"){                         : enter'a bastığımız zaman sendButton id'sine sahip öğenin tıklanması komutunu veriyoruz
    sendButton.click()
  }
})

let i = 0
let txt = "Yasir Çeşmeci"
let speed = 50
function typeWriter() {
  if (i < txt.length) {                                            : onclick eventiyle birlikte kullanılınca animasyonlu text oluşturmamızı sağlıyor(todoapp denememde mevcut)
    document.getElementById("myName").innerHTML += txt.charAt(i)
    i++
    setTimeout(typeWriter, speed)
  }
}

JSON : JavaScript Object Notation(Nesne Notasyonu)
JSON.parse() : parantez içindekileri javascript kodlarına(nesnelerine) dönüştürür. hes kodlarda , bytes'larda kullanılabilir
JSON.stringinfy() : tam tersi şekilde javascript kodlarını dönüştürür

=_=_=_=_=_=_=_=_==_=_=_=_=_===_=_=_=_=_=_=_==_=_=_=_=_=_=_=_=_=_=
HTML : new Date() , setTimeout , zaman , saat için örnek
JS   :<div id="MyClockDisplay" class="clock" onload="showTime()"></div>
      function showTime(){
      let date = new Date();
      let hours = date.getHours();
      let minutes = date.getMinutes();
      let seconds = date.getSeconds();
      let time = hours +" : "+ minutes +" : "+ seconds;
      let val;
      if( hours > 12){
        val = "PM"
      } else {
        val = "AM"
      }
      document.getElementById("MyClockDisplay").innerText = time + " " + val;
      setTimeout(showTime, 100);
      }
      showTime();
-----------------------------------------------------------------


input.value = ''; yaparak input'ın içeriğini sıfırlayabiliriz

let x = 10;
let y = 20;              : eval, parantezi içerisindeki işlemi gerçekleştirir. Hesap makinesi kullanımında çok işe yarıyor. (input value'deki işleme "x" dersek eval(x) bizze input içerisindeki işlemin sonucunu verir)
let text = "x" + "y";
let result = eval(text);

const: açılımı constant yani sabit demektir. Tıpkı var gibi " const number = 0 " yapabilir ve number isimli const 'a bir değer atamış oluruz. var'dan farkı ise eğer " var number = 0 " yapsaydık daha sonra " number = 2 " diyebilirdik yani var'ın içeriğini değiştirebiliyoruz ama
const'un içeriği sabittir ve değiştirilemez 


function withoutJquery (id) {
  switch (id) {
    case "green":                  : bir function'da id'yi seçerek gerçekleşmesini istediğimiz şeyleri switch'le yapabiliriz. burada htmlde bulunan " id='green' " i nasıl seçtiğimizi görüntüleyebiliri.z (Örneği Simon projemde mevcut)
      alert("working");
      break;

============================================
var productsResize = $('.carousel-item img');
$(window).resize(function() {
  if (window.innerWidth <= 1000){
    productsResize.addClass('d-block w-100');         : ekran boyutuna göre sınıf ekleme ve çıkartma örneği (sadece 1000 yazınca oldu , neden başka ölçülerin olmadığını araştıracağım)
  } else{
     productsResize.removeClass('d-block w-100');
  }
});

!!!BİLGİ!!! : Ünlem(!) işareti bir değeri tersine çevirir ÖR: !true === false , !false === true . Yani false'ın başına ünlem koyarsak o artık true olur. Bunun fonksiyonlara verdiğimiz true false değerleri için kullanabiliriz(Simon Game'de bir örneği var)

document.querySelector(".firstDown").style.transform = "rotate(180deg)";  :seçtiğimiz öğeyi tam tersi çeviri. Bunu click anahtar kelimesinin içerisinde if'le yaparsak ve else if 'le de "rotate(0deg)" yaparsak tıkladığımızda öğe ters çevrilir
tekrar tıkladığımızdaysa öğe eski haline döner. (FAQ çalışmamda bunu yapmıştım)

!!BİLGİ!! : PROGRAMCILAR HER ZAMAN "0" DAN SAYMAYA BAŞLAR (Ör: Yasir 'in ilk harfi(Y) sıfır ve son harfi(r) 4. harftir)

ÖR: var a = "3";
    var b = "8"; diyelim ki a ile b 'yi yer değiştirmek istiyoruz ama bunu sayı kullanmadan ve a ile b'ye yeniden bir değer vermeden yapmak istiyoruz. Nasıl yaparız ? (section 9 ders 106 yapamazsan buradan kontrol et)


ÖR:var tweet = prompt("Write your message");
   alert("you write " + tweet.length + " character " + "you have " + (180 - tweet.length) + " character");  : bunu yaparak önce ekranda yazı yazılacak bir alan oluşturuyorsun yazıp gönderdikten sonra ekranda kaç karakter çıktığını ve daha
kaç tane yazabileceğini söyleyen bir uyarı ekranı çıkıyor

!bilgi : Javascript, bilgisayarın bizim için ne yapmasını istediğimiz bir komut dizisidir. alert("hello world"); dediğimiz zaman aslında say: hello world. demiş oluyoruz. yani bizim için hello world demesini sağlıyoruz
yalnızca insan dilinde değilde bilgisayar dilinde bunu yapıyoruz.
!bilgi : google> "shift + 7 (yani eğik çizgi) + j" yaparak javascript konsolu açabilir ve devamında sources'e gidip >> yazan yere tıklayıp snippet açabilir ve adını hello.js yaparak bir javascript yazabileceğin panel açabilirsin

alert("Hello World");  : Ekranın üst kısmından bir uyarı kutucuğu gelir ve içerisinde Hello World yazar

typeof("23") : tırnağın içerisine yazdığının sana ne olduğunu söyler. 23' sayı diyecektir , Yasir yazarsam string (bir yazı dizi) diyecek ve true veya false yazarsam da boolean diyecektir

prompt("What is your name ?") : tıpkı alert gibi yukarıdan bir kutucuk çıkartır fakat bu sefer kullanıcının içerisine yazı yazabileceği bir kutucuk mevcuttur.

var : Açılımı variable'dir değişken demektir. Tıpkı alert ve prompt gibi bir anahtar kelimedir. Bir kutu, bir değişken, bir veri kabı yarattığımız anlamına gelir. var'ı hafıza gibi düşünebiliriz örneğin " var myName = "Yasir" " dediğim 
zaman var buradaki anahtar kelimedir , myName buradaki isimdir(myName anlamındaki isim değil, myName'nin yerine yazdığım her şey isimdir yani varın anahtar kelime olması gibi myName'de isimdir , istersem başka bir şeyde yazabilirim) , 
tırnak içerisindeki de myName'de value'dir yani değerdir. var bu niteliğin sahip olduğu string'i server'a kaydeder ve ben istediğim zaman bana hatırlatır. Bunu da örneğin alert kullanarak yapabiliriz. ÖR alert(myName); 
bu kodu girip enter yaptığım zaman uyarı kutucuğunda Yasir çıkar. Yani bana myName ismindeki value'nin değerini hatırlatır         

var yourName = prompt("What is your name ?"); : Bu prompt'un cevabı artık var anahtar kelimesinin yourName isimli oluşturduğu kutucuğa kaydolacak. daha sonra alert("Nice to meet you " + yourName + "!"); yaparak alert kutucuğundan 
'Nice to meet you Yasir!'in çıkmasını sağlayabiliriz

!bilgi : var değişkeninizin ismini(var myName 'de myName bir isimdir) asla bir sayıyla başlatamazsınız , isim verirken asla iki kelime arasına boşluk koyamazsınız ve "$ , _ , sayı(sayı isimin başına gelemez) dışında" hiçbir sembol kullanamazsınız
!bilgi : değişkene isim verirken ilk kelimeye küçük harfle ve sonraki kelimelere büyük harfle başlarsan o ismi okumak(doğru okumak) daha kolay olur 

!!bilgi : Javascript'te "+" işareti birleştirici bir unsurdur. İki var ' ı birleştirmek istersek ÖR: var message = "Hello" ve var name = "Yasir" adlı iki var 'ımız olsun. Bu iki varın değerinin alertte gözükmesi için: alert(message + " there, " + name);
yaparsak sonuçta bize "Hello there, Yasir" mesajını verir 

.length : eğer . 'dan önce bir var ismi yazarsak bize o var'ın sahip olduğu değerin uzunluğunu söyler

.slice(x,y) : slice kesmek anlamındadır. Yani x'den(başlangıç) y'ye kadar(son) belirlediğiniz kısmı keser. Noktadan önce yazdığın "var" ismine ait öğeleri keser ve yalnızca o kısmı alır. Ör: var name="Yasir" yazdık ve yalnızca ilk üç harfini istiyoruz.
Öyleyse name.slice(0,3); yazmalıyız bu bize "Yas" ı verecektir. Eğer son üç harfini isteseydik o zaman name.slice(2,5) yazacaktır bu da bize "sir" i verecektir.

alert(prompt("Write your message").slice(0,140))   : prompt yaptıktan sonra kullanıcı prompt' a 140 dan fazla karakter yazdıysa ve biz sadece 140 karakter istiyorsak kutucukta yalnızca 140' ının gözükmesini sağlayabiliriz.
                   
.toUpperCase : noktadan(.) önce yazdığın ismin(var' ın ismi) kelimelerini/harflerini büyük yapar (section 9 bölüm 112)

.toLowerCase : noktadan(.) önce yazdığın ismin(var' ın ismi) kelimelerini/harflerini KÜÇÜK yapar (section 9 bölüm 112)

6/2 : aradaki "/" işareti bölmedir kodumuza bunu ÖR: var d = 6/2; olarak yazarsak bize 3'ü verecektir
6+3 : bize toplamı verecektir
6-3 : bize çıkarmayı verecektir
6%4 : bize 6 ve 4 'ün bölümünden kalanı verecektir
45%2 : bize sayının tek mi çift mi olduğunu söyler . Eğer sonuç 0'sa çift sayıdır eğer sonuç 0 değilse tek sayıdır

Increment
var x = 5;
x = x + 1; bu da x'i 5 yapar. Bunun pratik yoluysa x++ = 7 'dir.

Decrement
Aynı zamanda x-- = 4 'dır .

var x = 5; için 
x +=2; 'nin sonucu 7 'dir                 

var x = 5;
var y = 3; için   x +=y; 'nin sonucu 8 'dir . Bu yalnızca "+ işareti" için değil aynı zamanda " - , * , / " işaretleri içinde geçerlidir

function : bir dizi talimat oluşturmanıza, bunları bir kod bloğu halinde paketlemenize olanak tanırlar (Sürekli kullanman gereken kodları bu sayede birleştirir ve tek tek yazmak yerine funciton halinde yazarsın)	
function getMilk() {                       functionu oluşturmamız tıpkı 'var' gibidir. Function anahtar kelime ve getMilk verdiğimiz isimdir. Süslü parantezin içerisindeki her şeyse 'getMilk();' yazdığımız zaman
                    alert("leaveHome")     yürütülecek kodlardır.
                    alert("moveLeft")
                    alert("moveLeft")
                    alert("takeMilk")
                   }
!bilgi : google geliştirici araçları(f12)> yazdığımız kodları tümünü seçip 'ctrl + f' yaparsak ve isimlerini console.log dönüştürürsek kodumuz kullanıcıya gözükmez yalnızca console'da oynatılır      

function getMilk(bottles) {                                                 
                           console.log("leaveHome")
                           console.log("moveLeft")
                           console.log("buy" + bottles + "bottles of milk")       : bunu yaptıktan sonra function 'u çağırırsak ÖR: getMilk(2); fonksiyona bottles yazan yere 2 komutunu girmesini ve bize getirmesini söyleriz.
                           console.log("moveLeft")
                           console.log("takeMilk")
                           }

function getMilk(money) {                                                 
                           console.log("leaveHome")
                           console.log("moveLeft")

                           var milkMoney = money / 1.5;

                           console.log("buy" + milkMoney + "bottles of milk")       : bunu yaptıktan sonra function 'u çağırırsak ÖR: getMilk(10); fonksiyona money yazan yere 10 komutunu girmesini söylemiş oluruz. Bu sayede fonksiyon
                           console.log("moveLeft")                                    money yazan yerleri 10 yapar ve 10 / 1.5 ' ten milkMoney yazan yerden bize 6.66666' yı getirir. Eğer küsüratlı olmasını istemiyorsak ufak bir değişiklikle
                           console.log("takeMilk")                                    var milkMoney = Math.Floor(money / 1.5); yaparız ve kod bize tutarı yuvarlayarak verir
                           }

Math.round() : parantez içerisine girdiğimiz işlemi bize en yakın tam sayıya yuvarlayarak getirir.
Math.floor() : parantez içerisine girdiğimiz işlemi bize aşağıya yuvarlayarak getirir.
Math.pow (height,2) : height yazılan yerde girdiyi alacak ve karesiyle çarpacak. Eğer 2 değil de 3 yazsaydık küpüyle çarpardı
Math.random() : rastgele bir sayı verir. Eğer belirli bir aralığı istiyorsak ÖR: 1 - 6 o zaman bir 'var' oluşturur ve onu 6'yla çarparız

return : function'dan bir girdi alabildiğimiz gibi bir çıktı alabilmemizi sağlar. yani yukarıda yaptığımız işlemlerde girdi kaç süt alabildiğimizdir. eğer kodun sonu({süslü parantezin içinde olacak şekilde}) ' return money % 1.5 ' yaparsak
bize sütü aldıktan sonra kalan para üstünü verecektir ve bu da çıktı olacaktır. Bu return ' u kaybetmemek için var açıp kaydedebiliriz.(var' ı functionu getirirken yapacaksın ÖR: var change = getMilk(5);)

if (loveScore === 100) {
                      alert("Your love score is " + loveScore + "%" + "You love each other like Kanye loves Kanye")    :  'if' kodu 'bu şey gerçekleşirse' ne olmasını istediğimizi yazabileceğimiz bir koddur. Eğer loveScore 100 olursa 
                      }                                                                                                    kullanıcıya bu mesajı göndermesini söylüyoruz.


if (loveScore > 70) {
                      alert("Your love score is " + loveScore + "%" + "You love each other like Kanye loves Kanye")    :  Eğer loveScore 70'ten büyük olursa kullanıcıya bu mesajı göndermesini söylüyoruz.(aynısı '<' içinde geçerli)
                      }                                                                                                    


if (loveScore > 70) {
                      alert("Your love score is " + loveScore + "%" + "You love each other like Kanye loves Kanye")    :   'else' kodu 'if' kodundaki geçerli değilse gerçekleşir. yani Ör: 'if user doesn't get number bigger then 70 this should be he/she gonna see   
                    } else {                                                                                                this message'. Çok kullanışlı kodlar. Bu olmazsa bu olsun gibi kodda inanılmaz bir işlevsellik sağlıyor         
                           alert("Your love score is " + loveScore + "%" + "You should find other one xD")  
                           }

BİLGİ! '===' eşitse , '!==' eşit değilse , '>' büyükse , '<' küçükse , '>=' büyük veya eşitse , '<=' küçük veya eşitsedir


___________________________
 '&&' ve demektir , '||'(düz çizgi: ctrl + alt + shiftin yanındaki ve windows tuşunun üstündeki tuş) veya demektir , '!' değil demektir. if ve else içerisinde kullanabileceğimiz önemli kodlardır!! 


if (loveScore > 70) {
                      alert("Your love score is " + loveScore + "%" + "You love each other like Kanye loves Kanye")    :     iki 'if' birden kullanabiliriz. Eğer bir if gerçekleşmezse öbürünün gerçekleşmesini sağlıyoruz ve bunu yaparken "&&" ve anlamında kullanıyoruz.
                    } 

                   if(loveScore > 30 && loveScore <= 70) {
                                                          alert("Your love score is " + loveScore + "%" + "That's not cool")
                                                          }

function isLeap(year) {(bu)   
 if (year % 4 === 0) {
     alert("true");
 } else {                        : bu fonksiyonda function oluşturup ismini 'isLeap' verdik ve parantezine de 'year' değerini verdik. sonra 'if' le dedik ki eğer 'year' ın 4' e bölümü kalansız çıkıyorsa alert true olduğunu söylesin. Sonra 'else' le dedik ki eğer bölüm
     alert("false");               kalanlı çıkıyorsa alert bize false olduğunu söylesin.
 }   

}(burada kapanıyor)
isLeap(2021)

______________________________
function isLeap(year) { 
 if (year % 4 === 0 || year % 100 !== 0 && year % 400 === 0) {
    return("Leap year.");                                   
 } else {                                                            : bu fonksiyonda eğer 4' e bölümünde kalan olmuyor 'veya' 100'e bölümünden kalan oluyor 've' 400' e bölümünden kalan olmuyor leap year'dır eğer bu dediklerimiz dışındaysa not leap year' dır dedik.
     return ("Not leap year.")                                         bu tarz fonksiyonlarda eğer birden fazla olması gereken ve olmaması gereken ihtimal varsa ||(düz çizgi: ctrl + alt + shiftin yanındaki ve windows tuşunun üstündeki tuş) veya diyebilir && kullana-
 }                                                                     've' diyebiliriz.

}
isLeap(1998);


BİLGİ!! : if içerisine bir if daha yazabilirsin. Örn if(blablabla){
                                                                   if(blablablab){  (section 10 ders 130)
                                                                                 }
                                                                  }

Bilgi! : else yerine else if 'ten kullanılabilir (farkını daha öğrenmedim ama sanırım birden fazla else kullanılması gerektiğinde lazım oluyor)

var eggs = ["1", "2", "3", "4", "5"];       : 'var' içerisinde birden fazla öğeyi tutabilmemiz için parantezleri bu şekilde köşeli parantez olarak açmamız ve ismi çağırırken de bu şekilde köşeli parantezle çağırmamız gerekir. (bu sonuç bize eggs ismindeki var' ın içerisinden)
var myEgg = eggs [1];	            '2' sonucunu getirecektir. Çünkü yazılımda saymaya sıfırdan başlanır) (eğer eggs.length:  yaparsak bize köşeli parantezin içerisinde kaç öğe olduğunu söyler)   

!!BİLGİ : eğer yukarıdaki yumurta var' ına bakarsak ve oradaki var' da bir öğenin olup olmadığını kontrol etmek istersek: eggs.includes(3)(buradaki 3 öğedir yani eggs isimli var'ın bu öğeye sahip olup olmadığını sorgularız) yaparsak ve varsa bize true eğer yoksa bize
false değerini verecektir

!!BİLGİ!! : if ve else' yi ille function içerisinde kullanmak zorunda değiliz!

.push(5);  : noktadan önce gelen öğenin içerisine parantez içerisinde yazanı getirir. Öğenin içerisine sona gelecek şekilde girer. ÖR: eggs.push(6); bunu sonucunda eggs' e 6' nın eklendiğini görüntüleyeceğiz
userClickedPattern.length-1 : bu bize userClickedPattern dizisindeki son öğeyi verir
.pop(6);  : noktadan önce gelen öğenin, parantez içerisinde bulunan sayıya sahipse o sayıyı o öğenin içinden kaldırır

count++  demek , count = count + 1 'la aynı anlamdadır

while() : while bir döngüdür. Parantez içerisindeki ifade doğru olmayana kadar bu döngü devam eder.(section 10 ders 136)
ÖRN: var i = 1;
     while(i<2) {console.log(i);
                 i++;                   : bu döngüde i 1'e eşittir. while döngüsü i 2'den küçük olmayana dek devam edecektir. Lakin i++ yaptığımızdan döngü ilk sonucu verdikten sonra ikinci sonucu vermeyecektir çünkü artık i 2' ye eşittir. EĞER BİR FONKSİYON VARSA KESİNLİKLE O 
                 }                        FOKSİYONUN İÇERİSİNDEKİ ÖĞELERİ {} İLE İÇİNE ALMALIDIR

for() : tıpkı while gibi bu da bir döngü oluşturur.
ÖRN: for(i=1; i<2; i++){
                        //your code      : bu döngüde i 1'e eşittir. for döngüsünde bilgisayar sol baştan önce for'u tarayacak ardından i'yi 1 olacak alacaktır. Daha sonra i'nin 2' den küçük olup olmadığını kontrol edecektir. Bu kontrolden sonra kod kapanışta bulunan süslü paranteze(})
                        }                  gidecek ve kodu tamamlayacaktır. Daha sonra tekrar başa dönecek ve bu sefer ' i++ 'ı tarayacaktır. i++ 'ın 2'den küçük değil 2'ye eşit olduğunu görüntüleyecek ve kodu bitirecektir.
_______________________________
document.querySelector("")  : parantez içerisine yazdığımız 'sınıfı(class) , id'yi , ve hatta div , img , h1 gibi' öğeleri seçmemizi sağlar(başına const div = document.querySelector("") yapıyoruz ki sonra işlev eklerken const'a verdiğimiz 'div ismini' kullanalım). daha sonra bu seçtiğimiz öğelere
                              div.addEventListener("" , () => {                                   yaparak işlev ekliyoruz
                                                               text.style.display = "block"
                                                               }) 

document.querySelector("h1").innerHTML = "Good Bye";  : Sunucu html içerisinde h1' i arayacak ve bulduğu zaman 'Good Bye' a eşitlyecek. böylece h1'de yazan yazı good bye olacak(yalnızca ekranda bulduğu ilk h1'i değiştirecektir)


____________________________________
var sehirler=["Kocaeli", "İstanbul", "Ankara", "İzmir"];
var html="";
for(var i=0;i<sehirler.length;i++){                                : bunun açıklamasını telefona ses kaydı yaptım
                                   html=html+" "+sehirler[i];
                                   }

Properties:
innerHTML
style
firstChild

Methods:
click()
appendChild()
setAttribute()
__________________________
document.firstElementChild : document web sitesinin kendisidir. web sitesinin ilk elementi HTML'dir. İkinci defa .firstElementChild yaparsak HTML'den sonra head etiketi gelir. Eğer ilk firsElementChild'den sonra .lastElementChild 
yaparsak bu sefer bize html'deki son etiketi verir(muhtemel body'dir varsa footer). Tekrar tekrar bunu yaparak html içindeki öğelerimizi seçebilir ve üzerlerinde değişiklik yapabiliriz.İstersek bunu bir var'a kaydedebiliriz(Section 11 ders 141)

document.getElementsByTagName("li"); : öğeleri seçerken taglarını (anchor'un a , heading h1,h2 , list'in li) kullanıyoruz. Eğer o öğeden birden fazla varsa 
!!!! document.getElementsByTagName("li")[2].style.color ="red"; !!!! Bunu yaparak 3. li öğesini seçmiş olduk(yazılımda sayma 0'dan başlar) ve 3. li 
öğesinin css'nin özelliği olan .style.color' la rengini kırmızı yapmış olduk
document.getElementsByTagName("li").length; : kaç tane li öğesi olduğunu öğrenebiliriz 

__________________________
document.getElementsByClassName("btn"); : öğeleri class'larına göre alır ve burada önemli bir nokta şu ki : getElement(s) diyor yani çoğul olarak alıyor. Bu da demektir ki bir dize(köşeli parantez) oluşturuyor. Bu durumunda bizimde değişiklik
yapmak istediğimizde document.getElementsByClassName("btn")[0].style.color="red" yapmamız lazım. SINIFI İÇEREN TEK BİR ÖĞE BİLE OLSA KÖŞELİ PARANTEZ ZORUNLU

document.getElementById("title");  : HTML içine eklediğimiz id'leri(#) seçmemizi sağlar.Seçerken başına # koymaya gerek yok(element(s) değil element yazıyor TEKİL)

document.querySelector("#title");  : HTML içine eklediğimiz hem id'leri hem class'ları hem de elementleri(h1,a,span,body,div) seçmemizi sağlar. bunu yaparken id'ye # ve class'la '.' kullanılır

document.querySelector("li a");    : HTML'deki li öğesinin içindeki anchor'u bize getirecektir.(aynısını bir class'ın veya id'nin içerisindeki öğe içinde yapabiliriz. Ama eğer li içerisindeki class veya id'se o zaman boşluk bırakmayız)

document.querySelector("#list .item") : id içerisindeki class'ı çağırdığımız zaman bize ilk class öğesini verecektir. Eğer bütün class öğelerini istiyorsak =>
document.querySelectorAll("#list .item") : Bunu yaparak id içerisindeki bütün classları çağırmış oluruz ve hatta istersek köşeli parantez[] kullanarak yalnızca birini seçebiliriz

____________________________________
document.querySelector("h1").classList;                 : h1' e tanımlı class'ları gösterir
document.querySelector("h1").classList.add("huge");     : h1'e 'huge' class'ının tanımlar
document.querySelector("h1").classList.remove("huge");  : h1'deki 'huge' class'ını kaldırır
document.querySelector("h1").classList.toggle("huge");  : h1'de huge class'ı varsa kaldırır eğer yoksa ekler 

document.querySelector("h1").textContent ="hello";  : h1'i bulacak ve içindeki yazıyı helloyla değiştirecek
document.querySelector("h1").innerHTML ="<em>Good Bye</em>";  : innerHTML'i textContent'ten ayıran özellik innerHTML ile yalnızca yazı değil aynı zamanda html tag'ı da ekleyebiliyoruz

__________________________________
.attributes : html etiketinin içerisindeki öz niteliklerdir (class, href ,)
.getAttribute("href"); : noktadan önce selector edilen etiketin özniteliğini alır.(attribute sonunda s yok)
document.querySelector("a").setAttribute("href" , "https://www.bing.com") : href özniteliğini bing adresiyle değiştirir ve link google'da değil bing'de açılır

window.onload = function() {} : Function içerisinde olayların window (web sayfası) tamamen yüklendiği zaman gerçekleşmesini sağlar. (udemy'de yoktu kendim buldum)


buttonStart.onclick = function(){} : butona bir id veriyoruz daha sonra bu id'yi javascriptte buttonStart var' ına eşitliyoruz(var buttonStart = document.getElementById("button-start")) bu buttonStart öğesini de onclickle birleştirip fonksiyonun içerisine ne gerçekleşmesini
istediğimi yazıyoruz. Yazdığım şey butona tıklandığında gerçekleşecektir (udemy'de yoktu kendim buldum)

setInterval(startTimer, 1000) : setInterval bir zaman başlatıcıdır. Parantezdeki ilk yazı bir function'dur.İkinci parametre, her yürütme arasındaki zaman aralığının uzunluğunu gösterir. (udemy'de yoktu kendim buldum)

class="wrapper" : bu sınıfı verdiğimiz div'in içerisindeki öğeler sarılı olur (udemy'de yoktu kendim buldum)


___________________________
addEventListener("x", y);    : Anlamı olay dinleyicisi demektir. X'e gerçekleşmesini istediğimiz olayı(ÖR: click) yazıyorux y harfine de önceden gerçekleştirdiğimiz functionumuzu. Bu sayede tıklandığı zaman bu function(fonksiyonun sadece ismini yazacaksın parantez() veya süslü parantez{} koymayacaksın) 
gerçekleşecek(başına document.'le bir html çağırmalısın)(section 13 ders 162)


=========================
function add(num1, num2){      function multiply(num1, num2){    function calculator(num1, num2, operator)       eğer toplama işlemi yapmak istersek = calculator(4, 5, add) fonksiyonunu çağırır ve sonuç 9 olur. Eğer çarpma işlemi yapmak istersek = calculator(4, 5, multiply) fonksiyonunu çağırır ve 20 buluruz.                                       
 return num1 + num2;            return num1 * num2;               return operator(num1, num2)                  : calculator(4, 5, add) ' deki calculator function'dur, 4 calculator fonksiyonuna gider ve num1'in yerini alır , 5 yine calculator formuna gider ve num2'yu alır, add veya multiply ise yine calculator
}                              }                                 }                                               fonksiyonuna gider ve operator değerini alır



!!BİLGİ : google geliştiri araçlarında konsola debugger; yazarsan sana yaptığınız işlemleri adım adım takip ettirecek bir görüntü sağlar. Hata ayıklamak için kullanılır


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
document.querySelector(".resetButton").addEventListener("click", reset)
function reset(){                                                         : buradaki window.location.reload(); 'ı function yardımıyla button'a bağladık ve button'a her tıklandığında sayfayı yenileyecek
  window.location.reload();
}

=======================
background-image: url("images/tom1.png");    : url parantezinin içerisine fotoğrafın olduğu klasörü(images) yazıyoruz ve daha sonra eğik çizgiyle fotoğrafın  adını yazıyoruz ve öğemizin arka planı o görsel oluyor

========================
var audio = new Audio("sounds/tom-1.mp3");      : audio adında bir 'var' oluşturduk ve "new Audio"'yla HTMLAudioElement'i oluşturduk. Oluşturduğumuz HTMLAudioElement'inin(new Audio()) parantezinin içerisine ses dosyamızı ve sonra sesi yazdık(sounds/tom-1.mp3)
audio.play();                                    audio.play(); 'le de oluşturduğumuz audio var'ını play anahtar kelimesiyle çalıştırdık. Anahtar kelime çok önemli (Section 13 ders 165)

==========================
this : Anahtar kelimedir. Olaylarda(event(addEventListener)) kullanıldığında olayın kullanıldığı elementi temsil eder. ÖR: console.log(this) denildiği zaman içinde bulundukları elementi console yansıtacaktır. Elementin içindeki yansıtmak içinde console.log(this.innerHTML) kullanılmalı.(section 13 ders 165)

****************************
var infoMe = {                                                                                                                           var'a bir isim verip onu yalnızca tek bir bilgiye eşitlemek yerine süslü parantezin içerisine alıp farklı farklı bilgilere eşitledik
  myName: "Yasir",                          alert("Hello my name is " + infoMe.myName + "I am working " + infoMe.workTime + " year" )  : bu sayede bir değişkene birden fazla bilgi ekleyip daha sonra o bilgileri çağırabiliriz. Bunu yaparak aslında bir obje oluşturmuş oluyoruz(section 13 ders 166)
  workTime: 2,
  workSkills: ["design" , "front-end dev."]
}

====*=========*========*=======
Constructor Function (Kurucu Fonksyion)

function BellBoy (name, age , hasWorkPermit, languages){
this.name = name;                                            Kurucu fonksiyonu diğer fonksiyonlardan ayıran en belirgin özelliği function'ın isminin ilk harfi büyük yazılır("B"ellBoy). Bu fonksiyonu bir kere oluşturduktan sonra var bellBoy1 = new BellBoy("Yasir", 20, true, ["English", "Franche"]); yaparak 
this.age = age;                                            : BellBoy'un içindeki name, age ve hasWorkPermit ve languages değerlerini doldurmuş oluruz. Dikkat edilmesi gereken kısım isime var'a isim verip eşitlerken function ismimizin hemen arkasına "new" anahtar kelimesini getirmemizdir
this.hasWorkPermit = hasWorkPermit;                          var bellBoy1 = new BellBoy ("Yasir", 20, true, ["English", "French"]); şeklinde bu kurucu fonksiyonu donatabiliriz.
this.languages = languages;

this.cleanServices = function (){                          : Ayrıca kurucu fonksiyonlara bu şekilde fonksiyonlarda ekleyebiliriz. Parantez içerisinde bir değer vermemiz gerekmez. Direkt bellBoy1.cleanServices diyerek çağırabiliriz
        alert("you got name")                                  
}


=======================================
var buttonLength = document.getElementsByClassName("drum").length;

for (i=0; i<buttonLength; i++){
document.querySelectorAll("button")[i].addEventListener("click", function () {

switch (buttonInnerHTML){

case "w":
var tom1 = new Audio('sounds/tom1.mp3');
tom1.play();                                     Sürekli if-else yazmak yerine daha pratik bir yöntem. Seçtiğim buttonun(querySelectorAll) html'i içerisindeki w'yi case'le hedef alıyoruz. Eğer w varsa new Audio'daki sesimiz etkinleşecek. Daha sonra break;'le bu ihtimali bitiriyoruz ve diğer ihtimal olan a'ya geçiyoruz. Yeni
                                               : bir case oluşturuyor ve ona da ne yapması gerektiğini söylüyoruz. Eğer html'de a varsa gerçekleşecektir. default: eğer bu öğelerin hiçbiri bulunmadıysa gerçekleşmesini istediğimiz şeydir. Üstte oluşturduğumuz var ve ardından gelen for döngüsü de i'i her seferinde bir defa 
break;                                           arttırarak diğer htmlleri incelemeye yarıyor.

case "a":
var tom2 = new Audio('sounds/tom2.mp3');
tom2.play();

break;

default: console.log(buttonInnerHTML);
}
})
}
===*===*===*=*=*=*======*====*
document.querySelector(".butnSubmit").addEventListener("click",function (){
  var text1 = document.querySelector(".firstText");
  var text2 = document.querySelector(".secondText");
                                                                                :eğer ".butnSubmit" class'ını verdiğimiz button'a tıklanırsa ".firstText" class'ını verdiğimiz yazının display(görüntü)'ı none olur (gizlenir), ".secondText" sınıfını verdiğimiz yazının display'ı block olur (ekranda görünür)

  if(text2.style.display === "none"){
    text2.style.display = "block"
    text1.style.display = "none";
  }

})

===================================
document.addEventListener("keydown", function(){
                                                           : "keydown" eventi bir tuşa basıldığında olayın tetiklenmesini sağlar.
})


document.addEventListener("keydown", function(event){
                                                           : "event" anahtar kelimesi bir functionun içerisine girmemizi sağlar. Yani keydown eventinin arka planında gerçekleşen olaylara girmemize sağlar
})                                                            bunun içinde console.log(event); yapmamız yeterlidir. Console'da bize bütün olayları gösterecektir.(e veya evt diye'de yazılabilir)


document.addEventListener("keydown", function(){
  makeSound(event.key);
})                                                         : "keydown" , function(){makeSound(event.key)} yaparak girdiğimiz event'in, key'i ni event.key yaparak bulduk. sonra makeSound functionu oluşturup function'a ve switch'e key dedik.
function makeSound(key){                                     Eğer key 'w' olursa gerçekleşmesini istediğimiz case'i oluşturduk 
 switch (key) {
   case"w":
    var tom1 = new Audio("sounds/tom-1.mp3");
     tom1.play();  
}
}

__________________________________________
setTimeout(function() {
document.querySelector.classList.remove(".hidden");                  : Örnekteki(".hidden") sınıfını 1000 milisaniye içerisinde kaldırmasını söylüyoruz.Zamanlayıcı. (section 13 ders 172	)
},1000)


=====__________=====******=====__________

var rates = document.querySelectorAll(".all-butn");
var rating = document.getElementById("deneme");
rates.forEach((rates)=>{                                             : "forEach" her bir öğe için demek. oluşturduğumuz rates isimli varın , seçildiği .all-butn sınıfına ait bütün öğeler için uygulamasını istediğimiz şeyi uygulayan bir fonksiyon yazdık(rating-card projesinde örneği var ,udemy dersinde yok kendim buldum)
  rates.addEventListener("click", function () {
  rating.innerHTML = rates.innerHTML
})
})
                                                                            >>
rates.forEach((rates)=>{
rates.addEventListener("click", function () {
rates.style.backgroundColor = "hsl(25, 97%, 53%)";                   : Seçtiğimiz sınıfın her bir öğesine bu şekilde css özelliği de atayabiliriz
})
})

======= iç içe öğelerde js'de mouse hover olayı ========
for (let i = 0; i < image.length; i++) {
  image[i].addEventListener("mouseover", () => {
    document.querySelectorAll("#play")[i].style.display = "block"
  })
}

for (let i = 0; i < image.length; i++) {
  image[i].addEventListener("mouseleave", () => {
    document.querySelectorAll("#play")[i].style.display = "none"
  })
}

===.map yöntemi===
[9, 16, 25].map((id) =>      : .map yönetimiyle birden fazla öğe için aynı işlemi gerçekleştirebiliyoruz(movies projesinde örneği var)
Math.sqrt(id) 
)

.substring(0,100)  : slice gibi düşünülebilir. "."dan önce gelen variable'ın içerisindeki dizeden yalnızca ilk 100 kelimeyi alır

▓▓▓▓▓ JS OBJELER'DE BİR HARFİN, ÖĞENİN VB OLUP OLMADIĞINI KOŞUL KOŞMAK İÇİN ▓▓▓▓▓▓
"in" operatörünü kullanıyoruz. 
ÖR:
const information = {name:""}
   if (("name" in information) & ("day" in information)) {
        setButtonActive(false)
       } else if (!("name" in information)) {                  : information adlı object'imizin içerisinde "name" varsa setButtonActive(false) olacak yoksa (true) olacak
        setButtonActive(true)
       }
▓▓▓▓▓ JS ARRAY'LERDE BİR HARFİN, ÖĞENİN VB OLUP OLMADIĞINI KOŞUL KOŞMAK İÇİN ▓▓▓▓▓▓
includes()'i kullanacağız
ÖR:
const information = ["name"]
   if (("name" in information) & ("day" in information)) {
        setButtonActive(false)
       } else if (!("name" in information)) {                  : information adlı array'in içerisinde "name" varsa setButtonActive(false) olacak yoksa (true) olacak
        setButtonActive(true)
       }




                                                                jQuery




$ : jQuery için dolar işareti document.querySelectorAll anlamına gelir. $ işareti yerine jQuery 'de yazılabilir.

$(document).ready(function (){
                                                     : Eğer jQuery linki body etiketinden hemen önce konulmaz da head etiketinin içerisinde konulursa , çalışması için JS kodlarımızı bunun içerisine yazmamız gerekir. Bu kod sayfa tamanlandığı zaman JS'i çalıştır demektir
})

$("h1").css("color", "red");                         : jQuery ile css özelliklerini etkilemek istediğimizde bu şekilde yazarız

$("h1").addClass("big-title");                       : jQuery ile sınıf eklemek istediğimiz zaman JS'nin aksine classList.add yapmıyor yalnızca addClass yapıyoruz
$("h1").addClass("big-title margin-50");             : Birden fazla sınıf eklemek için iki sınıf isminide aynı tırnak işareti içerisine yazıyoruz ve aralarında bir boşluk bırakıyoruz
$("h1").removeClass("big-title");                    : Eklenen sınıfı bu şekilde kaldırabiliriz

$("h1").hasClass("big-title");                       : Öğenin o sınıfa sahip olup olmadığını kontrol eder

$("h1").text("hello");                               : Seçtiğim öğenin içerisine yazı yazmamızı sağlar
$("h1").html("<em></em>");                           : Seçtiğimiz öğeye etiket ekleyebilmemizi sağlar 

$("a").attr("href", "www.mankensfashion.com");       : Attribute'i değiştirmemizi sağlar
$("a").attr("src", "images/drum1.png");              : Aynı zamanda src içinde kullanabiliyoruz

$("h1").click(function() {
  $("h1").css("color", "purple");                    : addEventListener'la bir anahtar kelime ekleyeceğimiz zaman örnekteki gibi click anahtar kelimesiden sonra function oluşturmalıyız
});

$("h1").on("click", function() {
  $("h1").css("color", "purple");                    :addEventListener yerine on 'da kullanabilir ve bu şekilde yine anahtar kelimeyle function ekleyebiliriz


$("h1").before("<button>New</button>");              : Seçili HTML öğesinden önce bir öğe daha oluşturmamızı sağlar (aynı satırda değil bir üstünde)
$("h1").after("<button>New</button>");               : Seçili HTML öğesinden sonra bir öğe daha oluşturmamızı sağlar (aynı satırda değil bir altında)
$("h1").prepend("<button>New</button>");             : Seçili HTML öğesinin içinde o öğeden hemen önce bir öğe daha oluşturmamızı sağlar (aynı satırda seçili HTML öğesiyle yan yana)
$("h1").append("<button>New</button>");              : Seçili HTML öğesinin içinde o öğeden hemen sonra bir öğe daha oluşturmamızı sağlar (aynı satırda seçili HTML öğesiyle yan yana)
$("button").remove();                                : Eklenmiş olan BÜTÜN button öğelerini kaldırır

__________________________________
$("button").on("click", function() {
  $("h1").hide();                                    : Seçili öğeyi button'a tıklandığı zaman gizler.
})

$("h1").show();                                      : Gizlenen Öğeyi açığa çıkartır.

$("button").on("click", function() {
  $("h1").toggle();                                  : Seçili öğeyi button'a tıklandığı zaman gizler ve yine button'a tıklandığı zaman açığa çıkartır
})


$("h1").fadeOut();                                   : Seçili öğeyi yavaşça gizler (bir anda kaybolmaz önce soluklaşır)
$("h1").fadeIn();                                    : Seçili öğeyi yavaşça açığa çıkartır (bir anda ortaya çıkmaz önce soluk hali gelir)



$("button").on("click", function() {
  $("h1").fadeToggle();                                 : Seçili öğeyi button'a tıklandığı zaman yavaşça gizler ve yine button'a tıklandığı zaman yavaşça açığa çıkartır
})


$("h1").slideUp();                                      : Seçili öğeyi yavaşça yukarı kaydırıp kaybeder
$("h1").slideDown();                                    : Seçili öğeyi yavaşça aşağıya kaydırıp ortaya çıkartır 

$("button").on("click", function() {
  $("h1").slideToggle();                                : Seçili öğeyi button'a tıklandığı zaman yukarı kaydırıp gizler ve yine button'a tıklandığı zaman yavaşça aşağıya kaydırıp açığa çıkartır
})

$("button").on("click", function() {
  $("h1").animate({opacity: 0.5});                      : animate anahtar kelimesi öğenin "sayısal değer içeren özellikleri"yle oynamamızı sağlar. opacity'i 0.5(yani varsayılanın yarısı kadar) yaparak öğeyi soluklaştırabilirz.
})                                                        animate'le daha birçok özelliği değiştirebiliriz lakin bu özelliklerin sayısal değer içermesi gerekiyor! (section 14 ders 184)

________________________________________________

$("button").on("click", function() {
  $("h1").slideUp().slideDown().animate({opacity: 0.5});      : bu şekilde zincirleme özellik tanımlayabilir ve sanki canlı bir animasyon gerçekleşiyormuş gibi gösterebiliriz
})

===***===***___♦♦♦___♦♦♦===***===***===***
            !!!!ÖNEMLİ!!!!

$(".btn").click(function() {
  var userClickColour = $(this).attr("id");                            Seçtiğimiz ".btn" sınıfına tıklandığı zaman, $(this).attr("id"); yazdığımız bu kod sayesinde $(this)'le yine o sınıfı seçecek ve o sınıftaki
  var audio = new Audio("sounds/" + userClickColour + ".mp3");       : id'lerin .attr("id")'le özniteliklerini alacak(burada id'nin ismini alıyor). Bu sayede function içerisinde basit bir işlemle idleri seçebiliyor
  audio.play();                                                        ve onları var'ın içerisine koyup o var'ı istediğimiz işlemde kullanabiliyoruz
});

===***===***___♦♦♦___♦♦♦===***===***===***
             éééÖNEMLİéééé
$(".btn").click(function() {
                                                                       
  var userChosenColour = $(this).attr("id");                           Oluşturduğumuz animatePress'te istediğimiz şey, kullanıcı hangi düğmeye ve hangi id'ye sahip düğmeye tıklıyorsa ona ".pressed sınıfı eklemek". Daha öncesinde
  userClickedPattern.push(userChosenColour);                           oluşturduğumuz .click function'uyla zaten bu düğmeleri ve id'leri seçmiştik. Tekrar bir fonksiyon oluşturmak yerine, animatePress'e currentColour input'unu giriyoruz
  animatePress(userChosenColour);                                    : ve daha sonra zaten halihazırda oluşumu olan click function'una örnekteki gibi ekliyoruz. Bu şekilde birçok functionu (farklı parametreler vererek) .click function'una
});                                                                    ekleyebiliriz (Simon Game Challenge'de örneğini yaptım)
                                                                       
function animatePress(currentColour){                                  
  $("#" + currentColour).addClass("pressed");                          
}





                                                           HYPER TERMINAL




                                                                  !!BİLGİ!! 
                                   nodemon 'u çalıştırmak için "nodemon app.js" yapabiliriz. Eğer çalışmıyorsa veya komut algılanamadı 
                                             diyorsa çözüm nodemon'u yüklemektir. npx nodemon app yaparak çözülebilir



code . : komutuyla vs code'da içerisinde (cd yapıp gittiğin klasör) bulunduğun klasörü açabilirsin

HYPER UYGULAMASINDA önce ls yapıp nerede olduğunu kontrol etmeyi unutma!! masaüstüne gitmek istiyorsan cd Desktop yapmalısın

!!BİLGİ!! : birden fazla html dosyası oluşturacaksan bir kere touch komutu kullanıp html dosyalarını yazabilirsin ÖR: touch signup.html success.html

mkdir : make directory demektir. Bulunduğun konumda klasör oluşturabilmeni sağlar

ls : bunu yazdığımız zaman bize bulunduğumuz konumdaki bütün dosyaları listeler 

ls -a : gizli dosyaları da listeler. (ÖR: git bir gizli dosyadır)

cd : change directory demektedir. İçerisinde bulunduğunuz konumda bulunan images klasörüne gitmek için " cd images " yazmanız yeterlidir

cd ~ : kökümüze geri dönmemizi sağlar (git bash'te bunu yapınca en en başa dönüyor ls yapıp kontrol etmeyi unutma)

cd Desktop/benimdenemem/images/icon : dediğimiz zaman desktoptan icon klasörüne gider.

!!!BİLGİ!!! yukarı-aşağı tuşlarını kullanarak daha önce yazdığın komutlar arasında geçiş yapabilirsin

cd .. : cd'den sonra iki nokta koymak şu anda bulunduğun konumdan bir adım geriye gitmek anlamına gelir

ctrl + alt : yazdığınız komut satırının herhangi bir yerine mause 'la dönemezsin , ctrl + alt yaparak mause'la satırda tıkladığın yere gidebilirsin

crtl + a : ctrl + a satırda en başa dönmeni sağlar
ctrl + e : satırda en sona gitmeni sağlar
ctrl + u : yazdığınız komut satırını siler

touch Text.txt : touch sayesinde sonuna uzantıları yazarak dosyalar oluşturabiliriz. burada Text isminde bir not defteri oluşturmuş oluyoruz

start Text.txt : touch'la oluşturduğumuz not defterini açmamızı sağlar

start Atom Text.txt : bu komutu çalıştırdığımda Text.txt dosyasını Atom'da çalıştıracak

=== rm'leri KULLANIRKEN DİKKATLİ OL !!! YIKICI KOMUTLAR !! ===
rm : bir dosyayı klasörden kaldırmamızı sağlar ÖR: rm Text.txt ve enter'ladığımızda bu dosya kaldırılır(klasör kaldıramazsın)

rm * : klasörde bulunan bütün dosyaları kaldırır (rm'leri kullanırken dikkatli ol!!! Kesinlikle list yap ve nerede olduğunu hatırlar)

rm -r : -r'dan sonra yazdığımız klasörü kaldırır (rm'leri kullanırken dikkatli ol!!! Kesinlikle list yap ve nerede olduğunu hatırlar)

pwd : o sırada bulunduğun komut dizisinin ne olduğunu söyler (nerede olduğunu söyler)

node script.js : node'dan sonra script.js yazarak hyper panelinde içerisinde bulunduğumuz klasördeki script.js'in kodları görüntülenir

node : sadece node yazarsak hyper'da REPL'in içerisine girmiş oluruz. Read Evolution Print Loop demektir. Buraya girdiğimiz zaman google geliştiri araçlarında bulunan console'da yaptıklarımızı yapabiliriz Ör: console.log("Hello") yaparsak hyperda Hello gözükecektir.

.exit(Ctrl + C x2) : node' la girdiğimiz REPL'den .exit yazarak veya iki defa Ctrl + C yaparak çıkabiliriz.

clear : konsolda yazanların tamamını temizlemek için kullanılabilir

==========================================
AŞAĞIDAKİ KODLARI script.js 'e yazıyoruz
const fs = require("fs");                       : const fs = require("fs") node.js'in komutlarını kullanabilmek için oluşturduk(zorunlu). daha sonra node.js kodumudu olan fs.copyFileSync("","")'ı kullandık ve kopyalamak istediğimiz txt dosyasını seçip , kopyalanmasını istediğimiz dosyayı oluşturmasını söyledik.
fs.copyFileSync("text1.txt", "text2.txt");        bu kodu yazdık ama gerçekleşmesi için hyper'da bu kodları sahip olduğu .js'i çalıştırmamız lazım. Hyper'da bu dosyaların bulunduğu klasörün içerisine giriyoruz > cd Desktop/nodetry > node script.js

npm init : npm dosyalarının içerisine girmemizi sağlar

npm install x : x yerine npm paketinin ismini yazacağız ve yazdığımız paketi yükleyecek





                                                                            API

                                                                                  !!BİLGİ!! 
                                   nodemon 'u çalıştırmak için "nodemon app.js" yapabiliriz. Eğer çalışmıyorsa veya komut algılanamadı 
                                             diyorsa çözüm nodemon'u yüklemektir. npx nodemon app yaparak çözülebilir

====================ÖNEMLİ====================
BUNU KENDİN YAZ KOPYALA YAPIŞTIR YAPMA 
const express = require("express");

const app = express();

app.get("/", function(req, res) {                  : API'yı çağırmak için kullanılır. app.get'in içerisine yazılır. google'da localhost:3000 yaparak görsel halini görebilirsin
  res.send("server is up and running.")
})

app.listen(3000, function() {
  console.log("server is running on port 3000");
})




const express = require("express");
const https = require("https");

const app = express();

app.get("/", function(req, res) {
  const url = "https://api.openweathermap.org/data/2.5/weather?q=İstanbul&appid=f6fd89e0f96fa7d93f588f981763ab86"    : openweather apisini çağırdık ve sonucu console.log'a yazdırdık. sayfayı yenileyip hyper'a göz attığımızda bize apı'nın bütün sonuçlarını vermeli
  https.get(url, function(response) {
    console.log(response)
  })
})

app.listen(3000, function() {
  console.log("server is running on port 3000");
})

|| || YUKARIDAKİ ÖRNEKTEKİ CONSOLE.LOG'U DEĞİŞTİRİP response.statusCode'u çağıralım || ||
console.log(response.statusCode) : sayfayı yenileyip hyper'da kontrol ettiğimizde bize 200 sonucu vermeli(https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) eğer farklı bir sonuç veriyorsa istekte bir hata var demektir

|| || YUKARIDAKİ ÖRNEĞİN DEVAMI || ||
https.get(url, function(response) {
    console.log(response)
response.on("data", function(data){
 JSON.parse(data)                                : JSON.parse() sayesinde aldığımız dataları Javascript nesnelerine dönüştürür
})
  })

|| || YUKARIDAKİ ÖRNEĞİN DEVAMI || ||
https.get(url, function(response) {
    console.log(response)
response.on("data", function(data){
 const weatherData = JSON.parse(data)            : JSON'a dönüştürdüğümüz data'dan main objesini ve main objesinden de temp değerini almamızı ve console'a aktarmamızı sağladı
 const temp = weatherData.main.temp                main'i ve temp'i JSON'da bulmanın kolay yolu; https linkini(API'nın linkini) google'da aratarak ve JSON viewer pro'yla JSON'a dönüştürerek istediğimiz objenin üzerine tıklayarak üstüne tıklayıp
 console.log(temp)                                 solunda çıkan kutucuktan copy path diyerek yolu kopyalayıp weatherData'nın yanına yapıştırabiliriz
})
  })


!!!BİLGİ!!! : bir API'de 2 tane res kullanamazsın. Kullanmaya çalışırsan ERR_HTTP... hatası alırsın

res.send()  : res.send()'i yalnızca bir sefer çağırabiliriz. Eğer birden fazla api çıktısı almak istiyorsak res.write()'ı kullanacağız ve yine daha sonra res.send()'i çağıracağız

res.write("<img src="+ imageUrl +">") : imageUrl'ye kaydettiğimiz url'deki image'i bu şekilde çağırabiliriz. Ayrıca write'ın içerisine tıpkı img etiketi gibi etiketler yazabiliriz

================= INDEX.HTML'İ ÇAĞIRMAK İÇİN  ===================
app.get("/", function (req, res) {
  res.sendFile(__dirname + "/index.html")
}) 

================= CSS'i ÇAĞIRMAK İÇİN  ===================
app.use(express.static("public"))     : style.css'imizi css dosyamıza koyduktan sonra css'imizi (varsa images'lerimizi) public adında bir dosyanın içerisine koymalıyız

npm i body-parser : hyper'dan klasörümüze indirdiğimiz taktirde index içindeki name'leri bize .js içerisinde seçtirebilecek

const bodyParser = require("body-parser");            : bodyParser'i app.js'mize ekledik
app.use(bodyParser.urlencoded({ extended: true }))    : || aktif ettik
app.post("/", function(req, res) {                    : req.body.cityName yaparak index.html içerisindeki name'i seçtik.
 console.log(req.body.cityName)                         *post istediğinin gerçekleşmesi için html'de method="post" belirtmeliyiz. post'un gideceği yeri belirtmek içinde yine aynı yerde action belirtmeliyiz bunuda action="/" şeklinde yapabiliriz
})


=====================ÖNEMLİ==================
app.post("/", function(req,res) {
    const movieName = req.body.movieName
    const url = "https://www.omdbapi.com/?apikey=86f9dde7&t="+movieName;
      https.get(url, function(response) {
        console.log(response.statusCode);                                      : Eğer işlemi app.post'ta değilde app.get'te yapıyorsak normal bir apı alma işlemi gibi yapmalıyız ama app.post'ta yapıyorsak
        let stockData = '';  // boş bir string yarattık                          önce boş bir string oluşturup gelen dataları onun içine atmalıyız , daha sonra hepsi yüklenince "end" yöntemiyle de yansıtmalıyız 
        response.on("data", function(data) {
            stockData += data  // gelen dataları stringe yansıttık
        })
        response.on("end", function() {
            console.log(JSON.parse(stockData))
        })
      }) 
})


Promise.all(
  [Superman, Batman, Thor].map((id) =>
    fetch(`https://www.omdbapi.com/?apikey=86f9dde7&t=${id}`).then((resp) =>
      resp.json()
    )
  )
).then((moviesAPI) => {
  var firstMovie
  var secondMovie
  var thirdMovie                                                                : Tek bir API url'sinden birden fazla API url'si almak için promise.all ve .map kullanılabilir. Bu sayede değişken API'lerde birden fazla
  moviesAPI.forEach((item, index, arr) => {                                       dataya sahip oluruz. Datayı bize array içerisindeki object olarak veriyor.
    firstMovie = arr[0].Title
    secondMovie = arr[1].Title
    thirdMovie = arr[2].Title
  })
  console.log(firstMovie, secondMovie, thirdMovie)
})




                                                        HEROKU

HEROKU'YA VE TABİ GİT'E YÜKLEME YAPMAK İÇİN (section 20 ders 251'i ziyaret edebilirsin)

===========HEROKU===========
app.listen(process.env.PORT || 3000, function () {
  console.log("server is running on port 3000")
})

touch Procfile yaparak Procfile adında yeni file oluşturup içerisine web: node app.js yazmamız şart. Bu sayede heroku hangi script'i ve hangi yöntemle çalıştırmak istediğimizi bilecek

                                        =========▓▓▓ ÖNEMLİ ▓▓▓=========
Eğer projende değişiklik, ekleme yapmak istersen hyper'da " git add . " enter ve daha sonra " git commit -m 'buraya da neyi değiştirdiğini yaz' " enter ve finally " git push heroku master " yapman yeterli (git'e girmeyi unutma)








                                                      - Git ve Version Control Systems -

git init: bu komutla içerisinde bulunduğumuz folder'a git oluşturabiliriz

git status : bu komutla içerisinde bulunduğumuz folder'daki çalışma dizinimizi gösterir (ÖR: index.html) 

git add "dosya adı": bu komutla içerisinde bulunduğumuz folder'daki seçtiğimiz dosyayı staging area' ya eklemiş oluruz

git add . : bu komutla bulunduğumuz klasördeki bütün dosyaları git'e(staging area'sına) eklemiş oluruz

git commit -m "make <h1> title" : İlk commit'i yazmak için bulunduğun klasöre git commit komutunu yazacaksın. -m "" ' le de bir yorum bırakacaksın ki ileride dönüp baktığında bu version'da ne olduğunu ve ne yaptığını bilebilesin

git log : bu komutla , bulunduğun version'la ilgili tarih , bu versionu yapan kişi bir hash komutu ve en altında da yazdığımız yorumu görüntüleriz(-m "") 

=▓▓ git log yaptığımızda kırmızıyla (origin/master) yazan parantez Github'ımızdaki son sürümümüzdür. Yeşille (head -> master) yazan parantezimiz local repomuzdaki son sürümdür ▓▓=

git diff "dosya ismi" : bu komutla "" içerisideki dosyanın git commit'le yayınladıktan sonra üzerinde yapılan değişiklikleri görebiliyoruz

git checkout "dosya'nın ismi" : bu komutla , git commit'le yayınlayıpta bir süre sonra üzerinde değişiklik yaptığımız dosyaları git commit'le yayınlanmış haline döndürebiliriz

git remote add origin https://github.com/sirosiyasir/dosyaismi   : bu komutun git remote add kısmı "origin adındaki https linkine girmemizi sağlar" . Origin geleneksel olarak kullanılan uzak repolara girerken oluşturduğumuz isimdir 
 https linki de oluşturduğumuz github reposundan alıyoruz. (section 21 ders 255 dakika 5.20)

git push -u origin master  : bu komut sayesinde daha önceden "git remote add origin https'le" seçtiğimiz repo'ya kendi yerel dosyalarımızı yükleyebiliyoruz

!!BİLGİ!! working directory(bilgisayarımızdaki çalışmamız) > staging area(git'e çalışmamızı izlettiğimiz kısım) > local repository(git version'larını kaydettiğimiz kısım) > remote repository

git rm --cached -r .  : bu komut git add yaptığımız bütün dosyaları staging'den kaldırır(bunu yaparken nerede olduğuna dikkat et)

touch .gitignore  : bu komut sayesinde bizim dışımızda başka kimsenin görmesini istemediğimiz dosyaları göz ardı edebileciğimiz bir dosya oluşturur

gitignore dosyası : gitignore dosyasına tam adını(uzantısı dahil ÖR: .txt .html) yazdığımız dosyalar gizlenir (section 21 ders 257 dakika 7)

git clone "url": bu komut sayesinde tırnak işaretlerinini yerine (tırnakların içine değil) github'dan klonladığımız proje linkini yapıştırarak masaüstümüze klonlayabiliriz (cd Desktop yaptığından emin ol)

git branch "isim" : bu kod mevcut olduğumuz klasörde oluşturduğumuz git versionlardan birine alt dal (yani 2'den 3. version'a geçiş değil de 2.2 version gibi) oluşturmamızı sağlar

git branch  : yazarak hangi dallara sahip olduğunu görüntüleyebilirsin

git checkout "branch'ın ismi" : bu komut sayesinde , daha önceden oluşturduğumuz branch'e geçeriz ve yaptığımız işlemler o branch için geçerli olur (branch'te işlem yaptıktan aynı normal version'larda olduğu gibi terminale "git add ." ve "git commit -m "not"" yazman gerekiyor ki
branch versionun staging area'dan geçsin)

git merge "branch ismi" : bu komutu master'da yazarak branch'ımızı ana version'la birleştirebiliriz. Bu komutu branch'te yazarsak işe yaramayacaktır.

▓BAŞARISIZ OLDUYSA▓ git push başarısız olduysa ve bize error: failed to push.. diyorsa önce git pull yapmayı deneyelim daha sonra git push yapalım
▓HYPER'DA VS CODE'U AÇMAK▓ : " code . " komutu yeterlidir

EĞER GİT'TE KULLANDIĞIMIZ URL'Yİ DEĞİŞTİRMEK İSTİYORSAK
 git remote set-url origin https://github.com/user/repo2.git  , diyoruz ve origin'den sonraki https bölümüne yeni git repomuzun urlsini giriyoruz



                                                  EJS(Embedded JavaScript)


ejs'i express'le kurmak için önce npm ejs komutuyla ejs paketini indiriyoruz daha sonra express'imizi app.js'e ekliyoruz ve ardından:
app.set('view engine', 'ejs'); ' le ejs'ide ekliyoruz (app.set'in const app = express()'in altına yazılması gerekiyor)

EJS'in kullanmak için bir klasör oluşturmalıyız ÖR: views klasörü oluşturuyoruz. Bu klasörün içerisinde EJS html'i olacak bunuda list.ejs(list yerine istediğimiz ismi verebiliriz) uzantısıyla yapıyoruz(.ejs zorunlu)
HTML'limizi .ejs içerisine yazıyoruz. Daha sonra html'de mesela haftanın günleri yazsın istiyoruz:
 <h1> This is <%= kindOfDay %> </h1> 'le değişkenimizi html içerisine ekliyoruz. 
 
 daha sonra app.js'in app.get kısmında: 
 let today = new Date();
 let currentDay = today.getDay();             app.js kısmında new Date sayesinde günleri alıyoruz. eğer gün pazartesiyse day değişkeninin pazartesi eğer
 let day = "";                                salıysa day değişkenin salı olmasını söylüyoruz. Yani internet sitemizi pazartesi açarsak orada pazartesi
 if(currentDay === 0) {                     : salı açarsak orada salı yazakacak. Bunu oluşturduktan sonra html'e bağlamak içinse res.render'a
     day = "Monday"                           views klasöründe list adında bir dosya aramasını söylüyor ve bu dosyanın içerisindeki kindOfDay'in , day 
 } else if (currentDay === 1){                variable'ına eşit olduğunu söylüyoruz 
     day = "Tuesday"                          (genel kullanımda , kindOfDay ismiyle isimlendirmek yerine day ismiyle isimlendirip hem js'teki hem de
 }                                             html'deki isimleri aynı tutmak daha doğru ama başlangıç olarak kafamızın karışmaması için farklı yapıyoruz) 
 res.render("list", {kindOfDay:day})
________________________________
 Embedded JavaScript Etiketleri

<%= %> : Html içerisine yazılır , değeri direkt olarak şablona verir
ÖR:   <h1>It's a <%= kindOfDay %>!</h1>

<% %>  : Html içerisinde Javascript(if-else switch vb.) yazmamızı sağlar(üst satıra açılan alt satırdakini etkilemez, satır bazında her satırdaki js'lere tek tek eklenmelidir)
ÖR:   <% if(kindOfDay === "Tuesday") { %>
      <h1 style="color: red">It's a <%= kindOfDay %>!</h1>
  <%  } else { %>
      <h1 style="color: purple">It's a <%= kindOfDay %>!</h1>
  <%  } %>

<%- -%> : Çıktısız değeri şablona verir. footer ve header .ejs'leri oluşturup <html> ve </head>'in hemen altındaki <body>'ye kadar olan kısmı header.ejs'e yapıştırırsak ve 
<%- include("header") -%>'ı ana .ejs'mize bunu yazarsak oluşturduğumuz header şablonu ana ejs'e yansıyacaktır.(todolist-version1 ' de ve section 22 ders 271'de mevcut)
________________________________

                                             ÖNEMLİ BİLGİ! 
scope: scope kavrama anlamındadır. örneğin 
function a {                 bu kavramda a fonksiyonu x'i kavramız ve konsola yazdırmıştır bu durumda
             var x = 2;      a fonskiyonu çağrıldığında console.log'da 2 gözükecektir.
             console.log(x);
            }

Peki eğer function a'nın içerisindeki log'u dışarıya yazdırsaydık ? Bu sefer console hata verecektir çünkü var x = 2
function'ın içerisinde oluşturulmuştur ve dışından onu çağıramayız. peki function b {               yapsaydık ?
                                                                                     console.log(x)
                                                                                     }
sonuçta console yine hata verecektir çünkü bir function içerisindeki değişkenleri başka bir function'da çağıramayız.
Yani a function'nın kavradığı değişkenler ve manipülasyonlar yalnızca a fonksiyonu içerisinde geçerlidir buna da
Local Variables denir. .js dosyasının içerisinde oluşturulan variables'laraysa function içerisinden de dışarısından
da erişim sağlanabilir buna da global variables denir. Peki eğer bir if, while, for döngüsü veya function dışında
bir yerde variable oluştursak ? En nihayetinde onlarda da brackets var.. ama hayır eğer function dışında bir yerde
variable oluşturuyorsak o variable'a istediğimiz yerden erişebiliriz

                                                ▓▓▓▓▓▓▓▓ BU İKİ BİLGİ ÖNEMLİ ▓▓▓▓▓▓

BİLGİ! express'le bir web site oluşturduğun zaman klasörleri otomatik olarak kendi ekleme(without app.js). Style'ı , html ve öbür dosyaları manuel olarak app.js'ten eklemelisin
yani eğer html içerisine girip css linkini yazarsan yine de css çalışmayacaktır. app.js'te web sitesinde kullanacağın öbür klasörlerin yerini bildirmeli ve onları çalıştırmasını
söylemeliyiz. Bu durumda yapılması gereken bir public klasörü oluşturmak, bu klasörürü varsa script'i css'i imagesi faviconu eklemek ve express'e onu statik olarak çalıştırmasını
söylemek. ÖR: app.js'te app.use(bodyParser.urlencoded)'ın hemen altına  app.use(express.static("public") yazarak express'e static olarak public'i çalıştır dedik (bunun yanı sıra
list.ejs'e de veya hmtl'de css linki eklemeyi unutma)


        KENDİ EXPORT'UMUZU YAPMAK
date.js adında bir klasör oluşturup içerisinde exports.getDate = function( const a = "friday" return a) {} 'a sahip bir fonksiyon oluşturalım
oluşturduğumuz bu function'ın sonucunu(return'u) ana .js'imiz(app.js)'de kullanmak için ana .js'imizde const x = require(__dirname + "/date.js") 
adlı bir sabit oluşturalım. Bu sayede expor ettiğimiz js'e ana js'de import etmiş olduk. şimdi x(x yerine istediğimiz değişken ismini verebiliriz)'i
kullanmak istediğimiz yerde bir değişken oluşturup ona eşitleyeceğiz. ÖR: let day = x.getDate() function'ı çağırırken ()'lerle birlikte çağırmalıyız 


    PARAMETRELERİ YAKALAMAK İÇİN
app.get("/:topic", function(req,res) {
  console.log(req.params.topic);        :  "/"tan sonra gelecek herhangi bir parametreyi req.params sayesinde yakalarız
})                                          yani ÖR: localhost:3000/yeniblog 'taki yeniblog bir parametredir.


                                                        DATABASE


SQL: Structured Query Language
NoSQL: || || || 

SQL ve NoSQL arasındaki farklar : SQL içerisindeki bilgileri (isim , soyisim, adres) bir tablo şeklinde oluşturur ve her yeni biri ekleneceği zaman bu tablo içerisinde yeni bir satır oluşturur.
Eğer ki oluşturulan satırlardan birine yeni bir içerik ÖR: "e-posta adresi" eklemek istesek, SQL bize bu esnekliği düzgün bir şekilde veremeyecektir. Çünkü öbür kullanıcılara e-posta adresi için
birer sütun oluşturacak ve onların e-postası olmadığı için "null" yanıtını döndürecektir. NoSQL'se bize bunu js object şeklinde verecek ve hangisine hangi içeriği eklemek istediğimiz konusunda bize
esneklik sağlayacaktır. İkisininde kendine göre avantajı ve dezavantajı bulunmaktadır. Seçim yapmak için nerede kullanacağımızı ve ne için kullanacağımıız iyi bilmeliyiz.

                      
                           
                              SQL
Create
Read                    : Baş harflerinin birleşmesiyle oluşan CRUD , bir SQL database'i kurarken oluşturulması gerekenlerdir
Update
Destroy






                                                REACT


React'ı kurmak için
hyperda ; oluşturduğumuz klasör'e " npx create-react-app klasörismi " komutuyla react'ı indirebiliriz.İndirdikten sonra vs code'da açıp terminale npm start yazarsak bize , tarayıcımızda klasörümüz açılacaktır
___________________________ React'ı dahil etmek___________________________________________
React'ı kurduktan sonra ana .js'imize dahil etmek için:
import React from "react" (import yapmak aslında: var React = require("react") yapmakla eşdeğerdir ama import ES6 kurallarına uygundur)
import ReactDOM from "react-dom" (react'ı indirdiğimiz zaman otomatik olarak .js'te import ReactDOM from "react-dom/client" olarak iner. O şekilde de kullanılabilir)
const root = ReactDOM.createRoot(document.getElementById("root"))
root.render(
  <React.StrictMode>
    <App />                                : önerilen render kullanımı budur. Diğer .render yönetimi de çalışır ve kullanılabilir. burada <App /> bütün componentları içeren App.js'dir. index.js' import edilerek kullanılır
  </React.StrictMode>
)
------------------------------------------------------------------------------------------

!ÖNEMLİ BİLGİ!
Javascript içerisinde yazdığımız html aslında normal html değil JSX(JavaScript XML)'dir. Bu yüzden html'le arasında farklar bulunmaktadır

!BİLGİ!
Javascript'in içerisindeki HTML'e Javascript variable'ı eklemek istersek onu süslü parantez içerisinde yazmalıyız ÖR: const name = "Yasir" <p>{name}<p> (`<p>${name}<p>` , bu da çalışır)

!ÖNEMLİ BİLGİ!
React'te html'e class, class="" şeklinde değil className="şeklinde eklenir"

!BİİLGİ!
style'ı inline style(satır içi) yazmak için style={{color: "red"}} şeklinde yapmamız gerekiyor

____________!ÖNEMLİ BİLGİ!________________
!css dosyasında değil de inline yazıyorsak!
const myStyle = {                                 Bu şekilde JS object'i oluşturup style'ımızı onun içerisine ekleriz. Object içerisinde style yazarken kebap tarzı yazım(font-size) deve tarzı yazıma(fontSize)
color: "red",                                   : dönüşür. Daha sonra variable ismini <h1 style={myStyle}> şeklinde etiketimize ekleriz. Eğer object içerisinde değiştirmek istediğimiz bir style var ÖR:
fontSize: "20px",                                 let date = new Date(), date.getHours() , if(hours < 12){myStyle.color = "green"} , şeklinde değiştirebiliriz.(scope'a (kapsam) dikkat et)
border: "1px solid black"
}

_____________________Components(Bileşen)_____________
React Components : Bileşenler büyük bir dosyayı veya karmaşık bir web yapısını daha küçük bileşenlere bölmemizi sağlar. React compenents'lara pascal harfleriyle isim vermek bir gelenektir o yüzden <h1> etiketine
components ismi vereceksen Heading , yani ilk harfinin büyük olmasına dikkat etmelisin. oluşturulan components .render'a şu şekilde eklenir: function Heading(){return <h1>Hello World</h1>}
                                                                                                                                             ReactDOM.render(
                                                                                                                                             <div>
                                                                                                                                             <Heading />
                                                                                                                                             </div>,document.getElementById("root"))                                 
    ▓ÖNEMLİ▓
Components'ları .js içerisinde değil de .jsx uzantısıyla yeni bir dosya içerisinde kullanmalıyız. Yukarıdaki function için bir .jsx oluşturalım:
Heading.jsx'dosyamızı oluşturduk daha sonra:
import React from "react"
function Heading(){                     : React'ı import ettik ve oluşturduğumuz .js'i export ederek diğer .jsx'lerde ve .js'imizde kullanabileceğimiz hale getirdik. Şimdi .js'e giderek export ettiğimiz .jsx'i
return <h1>Hello World</h1>                .js'e import edelim: import Heading from "./Heading" , dosya ismini ve konumu tırnak içerisine yazarak istediğimiz sayfaya .jsx'i import edebiliriz
}
export default Heading


!BİLGİ!
React'ı kurduğumuz zaman otomatik olarak public ve src'le birlikte geleceği için bizim oluşturmamız gereken klasörler genellikle component'lar olacaktır. Büyük projelerde 15-20'yi aşkın .jsx olacağı için bunları belirli bir klasör
altında ÖR: components klasörü altında tutarsak daha düzenli bir yapı oluşturmuş oluruz

   ▓BİRDEN FAZLA FUNCTİON'I EXPORT VE İMPORT ETMEK▓

import React from "react";
function List() {
  return (
    <ul>
      <li>Sunny Side Up</li>
    </ul>                             : .jsx veya .js dosyamıza react'ı import ettikten sonra oluşturduğumuz function'ı export etmek için: export default List 'i kullandık. Default olarak export ettiğimiz function'ın yanı sıra
  );                                    bir diğer function'ı da export etmek istersek o halde hemen altına: export{functionismi} şeklinde yapabiliriz. Yanda örneği mevcut olan dosyada yaptığımız gibi. Export ettikten sonra
}                                       import etmek için kullanacağımız dosyada önce default'ı klasik yöntemle import edip daha sonra default'un yanına virgül ekleyerek süslü parantez içerisinde öbür function'u dahil ediyoruz:
function Try(){                         İmport ÖR: import List, {Try} from "./List.jsx" , Try function'unu bu şekilde ekledikten sonra kullanmak istersek süslü parantez içerisinde function şeklinde(Try()) çağırmalıyız.  
  return 3                              İmport edilen Try'ı kullanma ÖR: <ul><li>{Try()}</li></ul> 
}

export default List;
export {Try}
=======================================================================================================================
!ÖNEMLİ BİLGİ!
import * as "dosyaismi" from "./dosyaismi" şeklinde de birden fazla function içeren dosyaları import edebiliriz ÖR:
import * as Calculator from "./calculator"
ReactDOM.render(<ul>
<li>{Calculator.functionİsmi()}</li>
<li>{Calculator.ikinciFunctionİsmi()}</li>       : şeklinde kullanımı vardır
</ul>,document.getElementById("root"))

!BİLGİ!
Eğer 3'ten fazla function varsa en iyi yöntem default kullanmadan direkt: export {x,y,z,v} , şeklinde export edip: import {x,y,z,v} from "./dosyaismi" şeklinde import etmektir


     ▓ Div Yerine Function İsmi Kullanmak ▓

function Header(){
return(
<header>
<h1>Hello World</h1>      :    Oluşturduğumuz function'lar içerisinde JSX 'in bize tanımladığı özelliklerden biri olarak div yerine istediğimiz ismi kullanabiliriz. Bu da css'de özellikler tanımlarken class eklemeden direkt
</header>                      header{font-size: 2rem} yapabilmemizi sağlar.(isimlendirirken function ismi kullanmak geleneksel)
)
}

     ▓▓▓▓ REACT PROPS ▓▓▓▓
React propslar, özünde bir html etiketine attributes(class , value, placeholder birer attributes'tir) eklemek gibi gözükür. Düz html'e kendi attributes'imizi ÖR: h1'e " telno = 05309233030 " şeklinde ekleyemeyiz ama React bize kendi attributes'imizi ekleme olanağı sağlar. Bunun adına da props deriz.
React yazarken <Card /> oluşturduğumuz card components'ına, className="header" şeklinde class ekleyemeyiz. Ama oluşturduğumuz Card.jsx'teki Card function'ındaki div veya h1'e ekleyebiliriz. Bunun nedeni <Card /> ' a className="header" eklediğimiz zaman bunu bizim kendi oluşturduğumuz bir attributes
olarak algılar. Yani bunun bir props olduğunu düşünür. Aşağıdaki props örneğinde görüldüğü gibi App.js(props) function'undaki <Card /> components'ına verilen attributes'ler Card.jsx'e props sayesinde iletiliyor ve Card.jsx'teki html'ler bu sayede dolduruluyor. App.js'de birden fazla <Card /> components'ı
oluşturularak farklı attributes'lerle doldurulabilir ve bu sayede ortaya tek bir componenst'la oluşturulmuş farklı isimde, farklı resimde, farklı tel no'da bir görüntü ortaya çıkar 

    App.js                                          Card.jsx
function App(props) {                       function Card(props) {
 return (                                     return (
 <div>                                         <card>
  <Card                                          <h1>My Contacts</h1>
   name="Beyonce"                                 <h2>{props.name}</h2>
   img="https://urlismi.jpg"                      <img src={props.img} alt="avatar_img" />
   tel="+123 456 789"                             <p>{props.tel}</p>
   email="b@beyonce.com"                          <p>{props.email}</p>
   />                                             </card>
  </div>                                        )
 )                                            }
}


      ▓▓▓ addEventListener'ı React'te Kullanamamak ▓▓▓
React'te addEventListener kullanımı geçerli değil. Onun yerine html etiketi içerisine event'ini yazmamız gerekiyor ÖR: addEventListener("click", ()=>{}) yerine <button onClick={functionismi}> şeklinde yapmalıyız. Bir function oluşturup onu variable'a eşitleyerek function ismi yerine variable ismi yazabiliriz


      ▓▓▓▓ REACT'E VANİLLA JS EKLEMEK ▓▓▓▓
Oluşturduğumuz script.js'e vanilla(react'te geçerli olacak şekilde yazdığımız) js'imizi ekliyoruz. function'ları birer variable'a(ÖR: const infoClick = function () {}) sabitliyoruz. Daha sonra hepsini export ediyoruz ve event'lerimize yerleştiriyoruz
Eğer birden fazla function ismi veya variable ismi eklenecekse: onClick={() => {
                                                                          infoClick()
                                                                          removeBattleClass()
                                                                        }}



      ▓▓▓▓ COMPONENTS'TA .map() KULLANIMI ▓▓▓▓
function createCard(contact) {          
  return (
    <Card                          !!!.map() KULLANIRKEN DİİKKAT EDİLMESİ GEREKEN!! : .map() yönetimi kullanılacaksa her bir object'in benzersiz bir kimliği(id) olmalıdır ve bu kimlik attributes'e "key" ismiyle yazılmalıdır. ÖR: key={id} (key yazmak zorunlu bir react kuralı) !!
      key={personality.id}                ||  YUKARIDAKİ .map() KULLANILIRKENİ OKU!!!  ||
      name={personality.name}            : createCard function'ında tek bir <Card /> oluşturduk ve attributes'lerimizi içerisine yerleştirdik. Bu <Card /> component'ını function App() içerisinde .map yöntemiyle kullanırsak, {personality.name}'i aldığımız javascript object'inde kaç tane name varsa .map bize o kadar
      imgId={personality.imgId}            <Card /> oluşturur ve içerisine name attributes'ini yerleştirir. ÖR:  {Personality.map(createCard)} , App() function'ında bu yönetimi kullanarak, Personality(Personality: App.js'e import ettiğimiz, js object'lerin bulunduğu dosyadır)'ta bulunan bütün object'leri createCard() function'undaki
      imgSrc={personality.imgSrc}          <Card /> yerleştirir ama her bir object için yeni bir <Card /> oluşturarak. KISA ÖZET: Yani .map yönetimi Personality içerisindeki her bir object için bir creacteCard function'ı oluşturur. (funny cards adlı project'te benzer bir örneği mevcut)
    />
  )
}

      ▓▓▓▓ .map , .filter , .reduce , .find , .findIndex ▓▓▓▓
https://codesandbox.io/s/map-filter-reduce-forked-iffj8k?file=/src/index.js


!!BİLGİ!! JSX içerisine doğrudan statement(if else, switch..) yazamayız. Dolaylı olarak(function içerinde) yazabiliriz veya Ternary Operator kullanarak yazabiliriz
Ternary Operator
CONDITION ? DO IF TRUE : DO IF FALSE : koşul doğruysa "?" işaratinden hemen sonraki gerçekleşsin yanlışsa ":"'dan sonraki 
ÖR: var logIn = true  
return(
<div>
logIn === true ? <h1>Hello</h1> : <h1>Failed</h1>     : bu durumda eğer logIn doğruysa Hello yazan "h1"'i return etmesi eğer logın false'sa Failed yazan "h1" return etmesini söyledik
<div/>
)

===YUKARIDAKİ ÖRNEK KISA YAZIM===
Yukarıdaki örnekte logIn bir boolen'a eşitlendiği için şu şekilde de yazabiliriz logIn ? <h1>Hello</h1> : <h1>Failed</h1> 


***&& in JS***
 expression && expression
        var x = 5;
     x > 3 && x < 7
***! in JS***
ünlem işareti başına koyduğumuz variable'ı eğer bu variable yanlışsa , eşit değilse anlamına getirir(olumsuz)


***&& in JS*** UYGULAMALI ÖRNEK ***! in JS***
https://codesandbox.io/s/conditional-rendering-practice-forked-g5eini?file=/src/components/Form.jsx


-----React State-----
UI = f(state) : kullanıcılara yansıttığımız web sitesinde aktif olarak değişiklik yapmak için stateleri kullanırız. Belirli durumlarda ne olmasını istediğimi söyleriz yani User Interface = function(){}'dır
ÖR: bir button'a tıklandığı zaman geçerli olacak state'i bir function aracılığıyla (ve tabiki onclick'le) gerçekleştirebiliriz(<button onClick={changeBodyColor}>onClick</button> , changeBodyColor function'u gerçekleştirilir) 
React'te stateleri işleyen bir render'da çalıştırmak için hook'lara ihtiyacımız vardır(yani function'ı oluşturup render.render() içerisinde çalıştırmak istediğimizde not a function uyarısı alacağız)

-----React Hooks-----
React'te DOM'un bir kopyasını .render ederiz , yani react'ın kullanışlı olmasının en büyük nedenlerinden biri bir değişiklik yaptığımız zaman bunu DOM'un tamamını yeniden render ederek değil de yalnızca değiştirdiğimiz kısmı
render etmesidir. Hooks bu konuda büyük önem taşır çünkü değişikliği useState hook'unu kullanarak yapacağız.

useState: import {useState} from "react"  'la import ettikten sonra const [x, y] = useState(z) şeklinde kullanabiliriz. Burada x değerimizdir , y'se function'dır (bu function direkt olarak değere etki eder) , z'se ilk değerimizdir
ÖR: https://codesandbox.io/s/usestate-hook-forked-xgnmn6?file=/src/components/App.jsx

********Destructiring Object********
https://codesandbox.io/s/es6-destructuring-forked-yiy8b8?file=/src/index.js

=========▓▓▓===== React'te API kullanmak ====▓▓▓=======
fetch(
      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apikey}`
    )
      .then((resp) => resp.json())  // json.parse formatına dönüştür
      .then((api) => {              // .then sayesinde "(api)" ismini vererek , apiden almak istediğin değerleri api. yaparak kolayca alabiliriz
        const temp = api.main.temp
        console.log(temp)
      })

Eğer kullanacağımız API'yı default olarak çağırıyorsak(yani bir event kullanmadan)
useEffect(() => {
    // useEffect kullanılmadığı zaman apiye dakikada binlerce istek gönderiyor çünkü isteği herhangi bir event'e bağlamadık
    // bu yüzden de useEffect kullanmamız gerekti. (Mesela Api.jsx'te event'e bağladığımız için bu useEffect kullanmadan da isteği yakaladık)
    fetch(
      `http://api.openweathermap.org/data/2.5/weather?q=Ankara&appid=${apikey}&units=${unit}`
    )
      .then((response) => response.json())
      .then()
  }, [])
-----------------------------------------------------------------

=========▓▓▓===== React'te event kullanmak ve style düzenlemek ====▓▓▓=======
https://codesandbox.io/s/event-handling-in-react-forked-7dk7u7?file=/src/components/App.jsx

ÖR: oluşturduğumuz state'i mouseenter ve mouseleave olaylarına göre set ediyor , sonra button elementindeki style'a işliyoruz
const [style, setStyle] = useState("white");

  function mouseEnter() {
    setStyle("black")
  }

  function mouseLeave(){
    setStyle("white")
  }
<button onMouseOver={mouseEnter} onMouseLeave={mouseLeave} style={{backgroundColor: style}}>


/* Ufak Bir Form Örneği(kontrollü giriş) */
https://codesandbox.io/s/react-forms-forked-75z5oy?file=/src/components/App.jsx

▓▓▓▓▓                                                       ▓▓▓▓    
*********** BİRDEN FAZLA STATE OLUŞTURMAK YERİNE ***************
const [apıInfo, setApıInfo] = useState({
    image: "",
    description: "",
    feelsLike: "",                       : tek bir state oluşturarak bu state'in değerini bir object yapıyoruz ve object içerisinde istediğimiz kadar değer oluşturabiliyoruz.(React_weather_app projesinde örneği mevcut)
    humidity: "",
    temp: "",
    city: "",
  })

===========Spread Operator(üç nokta)==============

const citrus = ["Lime", "Lemon", "Orange"]                   : üç nokta koyup yanına yazdığımız diziyi içerisinde bulunduğu diziye ekliyor. Bu sayede tekrar tekrar push işlemi yapmaktan bizi kurtarıyor
const fruit= ["Apple", "Banana", "Coconut", ...citrus]         aynı işlemi aşağıdaki örneklerde olduğu gibi ,object'lerde de yapabiliyoruz            

const fullName = {
fName: "James",
lName: "Bond"
}

const user = {
...fullName,                   <=
id: 1,
userName:jamesbond007
}
 
                                                    ||"ÖNEMLİ"||
▓▓-▓▓-▓▓REACT'TE BİR COMPONENT'TA BULUNAN STATE'İN DEĞERİNİ VEYA FUNCTİON'I , BAŞKA BİR COMPONENT'A AKTARTMA▓▓-▓▓-▓▓

    CreateArea.jsx                                          App.jsx
function CreateArea(props) {                     function App() {
 const [note, setNote] = useState({                function addNote(note){
     title: "",                                       console.log(note);
     content: ""                                     }
   })                                               return (
   function handleSubmit(e){                        <div>
   e.preventDefault()                                <CreateArea onAdd={addNote} />
   props.onAdd(note)                                </div>
   }                                                 );
                                                    }
}                                                  


export default CreateArea;                         export default App;

App.jsx'te oluşturulmuş olan <CreateArea/>'ya, App() functionu içerisinde oluşturduğumuz addNote() function'ınını değer olarak ekliyoruz. Daha sonra
CreateArea() içerisinde oluşturduğumuz handleSubmit() function'ınına (handleSubmit function'ı bir form doldurulduktan sonra gönderildiğinde gerçekleşen function uzamasın diye bu detayları eklemedim)
props aracılığıyla ekliyoruz. Ekledikten sonraysa artık props.onAdd(note) yaparak App.jsx'e bu state'i göndermiş oluyoruz.
Detay için: https://codesandbox.io/s/keeper-part-3-starting-forked-fgryzf?file=/src/components/App.jsx:400-419
_____________________________________________________________________________________________
React'te dosya içerisinde kolayca function oluşturmak için > Ctrl + P > ext install dsznajder.es7-react-js-snippets (bunu yaz ve enterla) > Boş bir jsx içerisinde rfce yaz > oluşturduğun jsx'in adında bir function oluşturacak

▓▓▓▓▓ --- REACT'TE SAYFA YÖNLENDİRMESİ(ROOT) --- ▓▓▓▓▓
 *npm i react-router-dom 'la paketi indiriyoruz*
import { BrowserRouter as Router, Route, Routes } from "react-router-dom"
import Home from "./pages/Home"
import About from "./pages/About"
import NotFound from "./pages/NotFound"

function App(){
<Router className="bg-purple-500">
  <Routes>
       <Route path="/" element={<Home />} />
       <Route path="/about" element={<About />} />               : react-router-dom'u kullanarak yollar oluşturuyor ve bu sayede oluşturduğumuz jsx dosyalarına bir "/" yol aktarıyoruz     
       <Route path="/notfound" element={<NotFound />} />
       <Route path="/*" element={<NotFound />} />
   </Routes>
</Router>
}

▓▓▓▓▓ REACT'TE .env Kullanmak ▓▓▓▓▓
ana klasörde .env dosyasu oluşturduktan sonra içerisine x="" şeklinde bilgiler ekleyiyoruz. Daha sonra bu bilgileri klasör içerisinde bulunun bütün dosyalarda {process.env.x} şeklinde çağırabiliyoruz

▓▓▓▓▓ REACT'TE CONTEXT KULLANIMI ▓▓▓▓▓
import { createContext } from "react"
const GithubContext = createContext()
const GITHUB_URL = process.env.REACT_APP_GITHUB_URL
const GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN

export const GithubProvider = ({ children }) => {
  const [users, setUsers] = useState([])
  const [loading, setLoading] = useState(true)

  const fetchUsers = async () => {
    const response = await fetch(`${GITHUB_URL}/users`, {
      headers: {
        Authorization: `token ${GITHUB_TOKEN}`,
      },
    })                                                                  : oluşturduğumuz bir .js dosyasında, normalde başka dosyanın içinde kullandığımız function'ları ve state'leri ekliyoruz. Daha sonra return kısmında .Provider'le burada değerleri döndürüyoru (value kısmı önemli!)
    const data = await response.json()                                    normalde kullandığımız dosyalardan bu functionları ve stateleri kaldırıp o sayfaya önce useContext'i ve oluşturduğumuz .js'i import ediyoruz. Daha sonra o sayfa içerisinde const {user, loading, fetchUsers} = useContext(GithubContext)'i ekliyoruz
    setUsers(data)                                                        (bu eklediklerimiz bu sayfada zaten daha önce kullandığımız state'ler ve function'lar). Bunlar onların yerini alıyor ve bu sayede de kod daha temiz daha okunabilir bir hale geliyor (githubfinder projesinde bir örneği var)
    setLoading(false)
  }

  return (
    <GithubContext.Provider value={{ users, loading, fetchUsers }}>
      {children}
    </GithubContext.Provider>
  )
}

▓▓▓▓▓ REACT'TE CONTEXT KULLANIMI(2) ▓▓▓▓▓
context.js oluşturduktan sonra
import {createContext} from "react"
const MainContext = createContext()
export {MainContext}                'le context'i oluşturabiliriz. Daha sonra app.js'e MainContext'i import ediyoruz. Import ettikten sonra app() function'ı içerisindeki bütün element'leri(</>) <MainContext.Provider value={}></MainContext.Provider> 'ye sarıyoruz. value{}'nin içerisine de öbür .jsx'lerde kullanmak istediğimiz değerleri giriyoruz
  bu değerleri value içerisine girerken önce bir object oluşturup (const data = {userId,setUserId}) değerleri onun içerisine giriyoruz daha sonra o object'i value'ye ekliyoruz. Context'i .jsx'lerde kullanırken de yine MainContext'i import ediyoruz ve ardında const {} = useContext(MainContext)'i function'a ekliyoruz süslü parantezin içerisine de
  getirmek istediğimiz değerleri (ÖR: const {setUserId} = useContext(MainContext)) giriyoruz. İster function istersek state diğer .jsx'lerde kullanıyoruz. (funnycards projesinde bir örneği mevcut)

▓▓▓▓▓ REACT'TE REDUCER KULLANIMI ▓▓▓▓▓
const githubReducer = (state, action) => {
  switch (action.type) {                  
    case "GET_USERS":                            
      return {                                 : reducer.js'te reducer'imizi oluşturuyoruz. Burada switch'i kullanarak duruma göre ne return'lamamız gerektiğini belirtiyoruz. Daha sonra reducer'ı kullanacağımız dosyaya useReducer'ı import ediyoruz. Bu dosyada oluşturduğumuz state'leri iptal edip yerlerine const initialState={users:[] ,loading:false}
        ...state,                               kullanıyoruz. Daha sonra const [state, dispatch] = useReducer(githubReducer, initialState)'ı ekliyoruz , buradaki state başlangıç değeri dispatch ise state'teki set() gibi. Durumun değişmesini isteğimiz function içerisine gidip dispatch({type: "GET_USERS", payload:data(buradaki daha fetch ettiğimiz url'den gelen API)) 
        users: action.payload,                  daha sonra reducer.js'de kullanacağımız bilgileri aktarıyoruz.Eğer context dosaysında kullanıyorsak, return ettiğimiz .Provider'daki value'yi de users: state.users ve loading: state.loading olarak ekliyoruz. reducer.js'te case "GET_USERS"i yakaladığı zaman yan taraftaki örnekte'de görüldüğü üzere users'ı action.payload'a
        loading: false,                         ve loading'i de false'a eşitliyoruz. Yani state'le aynı dosyada set() ederken burada reduce.js'te değişimde ne olacağı belirtiyoruz. switch'teki action.type'ı da zaten useReducer'ı kullandığımız dosyada eklemiştik(githubfinder projesinde bir örneği var) 
      }
    default:
      return state
  }
}

export default githubReducer


▓ React'te useRef Kullanımı ▓
const inputRef = useRef()                    : input'a ref'i ekledikten sonra , bir event yardımıyla useRef'i kullanabiliriz. misal onClick'i kullanarak tıklanıldığı zaman inputRef.current diyerek input element'ini seçebiliriz. inputRef.current.value = "Hello" diyerek input'un valuesini değiştirebiliriz. vanilla JS kullanarak , inputRef.current.style.backgroundColor = "red"
<input type="text" ref={inputRef} />           diyerek style'ını değiştirebiliriz

*fetch sırasında unmounted component uyarısıyla karşılaşılırsa (sıklıkla useEffect içerisinde) useRef'i , useRef(true) olarak ayarlarız ve eğer truey'sa fetch'den  dataları alırız. Data'ları aldıktan sonra da return ()=> {x(false)}'la useRef'i false'a döndürürüz


------ Tek Function'la Birden Fazla OnChange Gerçekleştirmek -------
const [formData, setFormData] = useState({
    email: "",
    password: "",
  })

  const { email, password } = formData
                                                    
  const onChange = (e) => {
    setFormData((prevState) => ({
      ...prevState,
      [e.target.id]: e.target.value,
    }))
  }
                                          : e-mail input ve password input'umuzu tek bir onChange function'ı ile bu şekilde oluşturabiliriz.
<input
            type="email"
            id="email"
            value={email}
            onChange={onChange}
          />

 <input
            type="password"
            id="password"
            value={password}
            onChange={onChange}
          />

--- Toggle Oluşturmak ---
const [showPassword, setShowPassword] = useState(false)
<input
     type={showPassword ? "text" : "password"}
                            />                                    : showPassword state'ini başlangıçta false olarak ayarlıyoruz. Daha sonra input'ta type'ı eğer showPassword true'ysa passwordu göster(yani type text yap) false'sa password'u gösterme(type'ı password yap diyoruz)
<img                                                               true ve false şeklinde ayarlanması içinde bir img belirliyoruz ve bu img'e onClick eventi ekleyip , setShowPassword sayesinde img'e tıklandığında password neye ayarlanmışsa tam tersi olmasını söylüyoruz (!prevState)
   src="images/eye.jpg"
   onClick={() => setShowPassword((prevState) => !prevState)}
      />


----- Mevcut div'in dışında herhangi bir yere tıklandığı zaman (özellikle açılır kapanır için) işlem gerçekleştirmek

// https://stackoverflow.com/questions/32553158/detect-click-outside-react-component url'sinden alıntıdır. Açılır kapanır bir component yapmak için kullandım
import { useState, useEffect, useRef } from "react"

export default function useComponentVisible(initialIsVisible) {
  const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible)
  const ref = useRef(null)

  const handleClickOutside = (event) => {
    if (ref.current && !ref.current.contains(event.target)) {
      setIsComponentVisible(false)
    }
  }                                                                                    :burada contains sayesinde mevcut olmayan div'e tıklandığını anlayacağımız bir function kuruyoruz
                                                                                        daha sonra bu function'ı kullanacağımız sayfaya import ediyoruz. Import ettikten sonra const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false) 'ı
  useEffect(() => {                                                                     kullanacağımız function'a ekliyoruz. ve "!" "&&" kullanarak ref'i çalıştırıyoruz.ÖR: <div ref={ref}>{!isComponentVisible && <p onClick={()=>{setIsComponentVisible(true)}}>Hello</p>} {isComponentVisible && <p>Good bye!</p>}</div>
    document.addEventListener("click", handleClickOutside, true)                        Uygulamalı örneği twitter projemde mevcut
    return () => {
      document.removeEventListener("click", handleClickOutside, true)
    }
  }, [])

  return { ref, isComponentVisible, setIsComponentVisible }
}


-----





                                                              React Toastify
      npm install --save react-toastify 'la öncelikle react-toastfiy paketini projeye indiriyoruz

import { ToastContainer } from "react-toastify"              indirdikten sonra app.js'e ToastContainer'ı ve css'ini import ediyoruz(en alttaki div'in bir üstüne)
import "react-toastify/dist/ReactToastify.css"

daha sonra hangi .jsx/.js'te toast'ı kullanacaksak oraya;
import { toast } from "react-toastify"   import ediyoruz. Eğer bir hata mesajı vermek istiyorsak toast.error("Something wrong about the registration") diyebiliriz.
Toastify'ın detaylı bilgisi github'ta mevcut link: https://github.com/fkhadra/react-toastify






                                                              Tailwind CSS
***KURULUM*** : https://tailwindcss.com/docs/guides/create-react-app
BİLGİ: Tailwind CSS , css'te bize kolaylık sağlamak için class(Name)'a verdiğimiz (tıpkı bootstrap'teki gibi) isimlerden oluşur
(EĞER daisyui kullanılacaksa kurulumdan sonra ek olarak > npm i daisyui > tailwind.config.js' gidip plugins'e require("daisyui") ekle. son hali plugins: [require("daisyui")] olacak)
|| AŞAĞIDAKİ className'lerde daisyui'de de kullanılan isimler mevcuttur ||
bg-purple-500 : arka plan rengini purple yapar
text-xl : yazının kalınlığını xl yapar
navbar: bize bir navbar oluşturur
mb-12 : yukarıdan ve aşağıdan 12 margin oluşturur
shadow-lg: gölge oluşturur
bg-neutral: arka planı neutral yapar 
text-neutral-content : yazıyı neutral arka plana göre ayarlar
container: bizim için bir container oluşturur(bootstrap'te olduğu gibi)
mx-auto: margin sağ-sol auto
my-auto: margin üst-alt auto
pr-2 : sağ tarafa 2rem padding ekler
px-2 : hem sağa hem sola 2rem padding ekler
inline: öğeyi satır içi yapar
font-bold: font'u kalın yapar
align-middle: öğeleri ortalar
btn : hover effect'i verir (button dışındaki öğelerdede işlevsel (ör:link nav))
btn-sm: button'ın boyutunu small yapar
flex-col: flex class'ı verilmiş öğeleri alt alta sıralar
justify-between: öğelerin arasında eşit boşluk bırakır ve öğeleri birbiri arasında dizer
footer: footer oluşturacağımız zaman bu sınıfı eklersek footer formatına uygun bir tip oluşturur
text-primary-content: text rengini beyaz yapar
footer-center: footer'daki öğeleri ortalar
font-bold: yazı tipini kalın yapar
hero: (daisyui) konteyner öğesi oluşturur
hero-content: hero class'ını tanıdığımız div'in alt div'ine eklediğimizde içeriğini kapsar(ortalar)
max-w-lg: max-width'i 32rem yapar
grid: element'e grid oluşturur
xl:grid-cols-4 : ekran xl boyutta olduğu zaman grid col'ları 4'e böler(bunu lg:grid-cols-3 md:grid-cols-2 şeklinde devam ettirebiliriz)
gap-8: esnek öğelerin arasındaki boşlukları hizalar
card : öğeleri card'a benzetir(border radius'lu)
compact: öğelerin boyutunu küçültür
w-full : width'i full yapar yanı üzerindeki div'İn tamamını kaplar
input-lg : input'un büyüklüğünü large yapar
absolute top-0 right-0 : bir öğeye tanımladığımız zaman o öğeyi hem absolute yapar hem top'ını hem de right'ını sıfır yapar(input'un hemen altına eklenmiş bir button'a eklenirse, button'ı inputun hemen dibine sabitler)
rounded-l-none: sol köşenin rounded'ını yok sayar
stat(daisyui): tanımladığımız div'i , içerisine bazı statüler ekleyebileceğimiz bir görüntüye çevirir
stat-title: tanımladığımız yazıyı hafif soluk  yapar
stat-value: tanımladığımız yazıyı koyu ve kalın yapar
===Æ gölgeli container için Æ===
rounded-lg shadow-lg card bg-base-100 , sınıf isimleri kullanılabilir
w-1/4 : eğer 4 öğemiz yan yana sıralı dizilecekse kullanılabilir (genişliği 1/4 yapıyor)
rounded-3xl: border-radius 1.5rem 'dir(öğenin köşelerini oval yapar)
rounded-full: öğeyi tamamen yuvarlak yapar
text-sky-500 : yazı rengini sky-500 yapar(twitter mavisine yakın)
cursor-pointer : öğenin üzerine gelince imleci pointer'e çevirir
underline : yazının altını çizilmiş yapar
hover:underline : öğenin üzerine gelindiğinde altını çizili yapar(klasik css hover'ı)
focus:border-blue-400 : öğenin üzerine tıklandığı(odaklanıldığı) zaman öğenin border'ının rengini blue-400 yapar(klasik css focus'u)
focus:outline-none  : öğenin outline'nını none yapar.(inputa tıklanıldığında default olarak çıkan dışındaki flur'u yok ediyor)
font-bold :  yazı tipini kalın yapar
!!! mx-auto , width tanımlanmış öğeleri ortalamada işe yarıyor
w-[36rem] : eğer w- 'de tailwind'in bize sunduğu width'ler yeterli değilse bu şekilde kendi width ölçümüzü tanımlayabiliriz
!!! grid h-screen place-items-center , bu sınıflar öğenin ekranın ortasına gelmesini sağlıyor
text-xs : yazı tipini xs yapar (daha bir çok size mevcut)
placeholder-blue-400 : placeholder'ın rengini blue-400 yapar
bg-[url('https://i.pinimg.com/originals/a5/de/39/a5de392b257f6c85f23c0a7cc91feb95.gif')] : background-img eklemenin bir yolu(bir diğeri ise extended'a sınıf olarak eklemek)
bg-no-repeat : background-img tekrar etmemesini sağlar
bg-cover : background-img'in bulunduğu div'i tamamen kaplar
grid grid-cols-8 : grid bize 6 öğe sığacak şekilde bir satır verir , istersek bu satırın içerisine yalnızca 2 öğe koyup birinin kapsayacağı alanı col-span-7 diyerek 7 öğelik seçebiliriz (diğerine col-span-1 demesekte onu 1 olarak tanımlayacak)
grid grid-cols-6 : bir öğeye col-start-1 col-end-3 diğerineyse col-end-7 col-span-2 verirsek bulundukları genişliğe göre başlangıç ve son'da ne kadar alan içerisinde bulunacaklarını söylemiş oluruz
tailwind.config'te extend'in içerisine eklersek kullanabileceğimiz yeni bir ekran boyutu olur (sadece ekran boyutu için değil birçok konuda özelleştirilebilir bir alan extend)
screens: {
        xs: "450px",
      },

inset-0 : top:0 right:0 left:0 bottom:0 anlamına gelir
break-words: boşluk olmadan yazılan uzun yazıların yalnızca enlemesine gitmesini önler



                                                   FIREBASE
Firebase'in kendi sitesinde öncelikle bir proje başlangıcı yapıyoruz. Orada projemize isim veriyor ve hangi app(web,apple,android)
için oluşturacağımızı seçiyoruz. Daha sonra firebase bize firebase.config'te kullanamamız için bir api bilgisi veriyor.
Masaüstünde oluşturduğumuz projemize npm install firebase komutuyla firebase'i indiriyoruz. İndirdikten sonra firebase.config.js
adlı bir klasör oluşturuyor ve klasörü bize verilen api bilgilerini yapıştırıyoruz. En altına da daha sonra import edebilmek için
export const db = getFirestore() 'u ekliyoruz(buradaki db: database). Tüm bunları bitirdiğimizde projemize firebase'ı eklemişiz demektir.
Şimdi firebase console'a giderek(firebase'in kendi sitesinde oluşturduğumuz projeye) orada authentication'ı aktif edeceğiz. Hangi seçenekleri kullanacaksak
ÖR: email/password , google, phone ,anonymous seçeceğiz ve auth için bunları kullanacağız.

Register

import {
  getAuth,
  createUserWithEmailAndPassword,                                       : eposta ve şifreyle kullanıcı oluşturmak için firebase'den import ediyoruz
  updateProfile,
} from "firebase/auth"
import { setDoc, doc, serverTimestamp } from "firebase/firestore"       : zaman damgası kullanarak kullanıcıyı ayırt etmek ve kullanıcı bilgilerini depolamak için timestamp'le doc kullanıyoruz
import { db } from "../../firebase.config"

const createUser = async () => {              // kullanıcıyı oluşturmak için bir event'e try-cath ekliyoruz
    try {
      const auth = getAuth()
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email                     // kullanıcının e-mail'i bunu bir variable'a kaydedip daha sonra buraya ekliyoruz
        password                 // kullanıcının şifresi bunu da bir variable'a kaydedip daha sonra buraya ekliyoruz
      )

      const user = userCredential.user                        // kullanıcı email ve password'la oluşturulduktan sonra kullanıcıyı user variable'ına kaydediyoruz

      updateProfile(auth.currentUser, {
        displayName: name,                                   // buradaki "name" bir variable, kullanıcıyı ayırt etmek için ona bir isim veriyoruz (zorunlu mu ? Değil) ve displayName olarak daha sonra kullanmak için kaydediyoruz
      })

      const userInformationCopy = {
        userInformation,                          // userInformation'da bir variable , mevcutta varsa kullanıcının (doğum bilgileri etc.) bilgilerini ekliyoruz
        password,                                 // şifreyi db'ye kaydettikten daha sonra firebase sahibi biz dahi panelden görüntüleyememek için sileceğiz, o yüzden buraya kaydettik
      }
      delete userInformationCopy.password                  // Daha sonra panelde biz daha görüntüleyemeyelim diye şifreyi siliyoruz
      userInformationCopy.timestamp = serverTimestamp()    // zaman damgasıyla kullanıcının kayıt olduğu tarihi kaydediyoruz

      await setDoc(doc(db, "users", user.uid), userInformationCopy)   // 2 ana 3 alt parametre kullanarak kullanıcıyı document'e kaydediyoruz(Cloud firestore'nın depolama birimi document'tir)
    } catch (error) {
      console.log(error)
    }
  }

Auth

import { getAuth, signInWithEmailAndPassword } from "firebase/auth"   // kullanıcı giriş bilgilerini doğrulamak için

const onSubmit = async () => {                                      // girişi bir event bağlıyoruz
    try {
      const auth = getAuth()                                       // auth'ı kuruyoruz

      const userCredential = await signInWithEmailAndPassword(     // kullanıcı e-posta ve şifresini alıyoruz
        auth,
        email,
        password
      )
      if (userCredential.user) {                              // eğer kullanıcı bulunur ve epostayla şifre uyuşursa ne olacağını belirliyoruz
        console.log("giriş başarılı")
      }
    } catch (error) {
      console.log(
        "Giriş yaparken bir sorun oluştu. Lütfen bilgilerinizi kontrol ediniz"
      )
    }
  }








